#  1)   # reps
# simulation2 <- expand.grid(
#  .63, # p.IP
#  .39, # p.PC
#  2,   # freq.mntr
#  1,   # enr.shape
#  4,   # out.mean
#  0,   # fut.mix.prob
#  c(1, 0.5, 101, 130), # eff.mix.prob
#  0.5,  # inf.mix.prob
#  0.05, # cred.tail
#  100,  # max.ss
#  50,   # min.ss
#  2)   # reps
#
# simulation <- rbind(simulation1, simulation2)
#
# simulation <- expand.grid(
#   #seq(.27, 0.63, length = 7), # p.IP
#   # .39, # p.PC
#   NA,
#   NA,
#   2,   # freq.mntr
#   1,   # enr.shape
#   4,   # out.mean
#   0,   # fut.mix.prob
#   # c(seq(1, 0, by = -0.05), 10, 20, 21, 22, 23, 24, 30), # eff.mix.prob
#   c(seq(1, 0, by = -0.05), 101:130), # eff.mix.prob
#   0.5,  # inf.mix.prob
#   0.05, # cred.tail
#   92,  # max.ss
#   50,   # min.ss
#   1)   # reps
## December 2021
simulation <- expand.grid(
# seq(.27, 0.63, length = 7), # p.IP
.39, # p.IP
.39, # p.PC
# NA,
# NA,
2,   # freq.mntr
1,   # enr.shape
4,   # out.mean
0,   # fut.mix.prob
rep(1, 2400),   # eff.mix.prob
# c(seq(1, 0, by = -0.05), 10, 20, 21, 22, 23, 24, 30), # eff.mix.prob
# c(seq(1, 0, by = -0.05), 101:130), # eff.mix.prob
0.5,  # inf.mix.prob
0.05, # cred.tail
92,  # max.ss
92,   # min.ss
5)   # reps
names(simulation) <- c(
"p.IP",
"p.PC",
"freq.mntr",
"enr.shape",
"out.mean",
"fut.mix.prob",
"eff.mix.prob",
"inf.mix.prob",
"cred.tail",
"max.ss",
"min.ss",
"reps")
write.csv(x    = simulation, file = "args_simulation.csv")
rm(list = ls())
if (Sys.getenv("USER") %in% c("kwiatkoe", "ek50"))  {
library(pracma)
library(gnorm)
} else {                                    # longleaf
library(pracma, lib.loc = "../rpkgs/")
library(gnorm,  lib.loc = "../rpkgs/")
args <- commandArgs(trailingOnly = TRUE)  # sequence from batch file
idx  <- as.numeric(args[1]);
}
# Model information, including all functions used (The only additional source file to be called is "code_enrollment.R")
load(file = 'args_model.RData') # loads all model information include prior parameters AND SETS SEED
set.seed(as.integer(idx*92920))  #  05-19-2020
# Simulation information
simulation <- read.csv(file = "args_simulation.csv", header = TRUE, sep = ",")
for(i in 1:ncol(simulation)){
assign(names(simulation)[i], simulation[idx, names(simulation)[i]])
}
# Simulations ---
vars  <- c("y1.IP", "y0.IP", "y1.PC", "y0.PC", "eff.prob", "fut.prob", "eff.mix.prob", "box.skpt", "box.enth", "box.ni")
suffix <- unique(c(seq(min.ss, max.ss, by = freq.mntr), max.ss))
final.inf.vars <- c("pm.skpt","pm.enth","pm.ni","pm.rd","pm.50.50","pm.skpt.enth","pm.skpt.enth.ni","pm.skpt.enth.ni.tilde","box.skpt","box.enth","box.ni","y1.IP","y1.PC","y0.IP","y0.PC")
final.inf.suffix <- "f"
names <- c(
# paste(expand.grid(vars,suffix)$Var1, expand.grid(vars,suffix)$Var2, sep = "."), # 06-10-21 added
paste(vars, "initial", sep = "."),
paste(vars, "final",   sep = "."),
paste(final.inf.vars, final.inf.suffix, sep = "."))
inner <- array(NA, dim = c(reps, length(names)), dimnames = list(seq_len(reps), names))
idx <- 1
rm(list = ls())
idx <- 1
if (Sys.getenv("USER") %in% c("kwiatkoe", "ek50"))  {
library(pracma)
library(gnorm)
} else {                                    # longleaf
library(pracma, lib.loc = "../rpkgs/")
library(gnorm,  lib.loc = "../rpkgs/")
args <- commandArgs(trailingOnly = TRUE)  # sequence from batch file
idx  <- as.numeric(args[1]);
}
# Model information, including all functions used (The only additional source file to be called is "code_enrollment.R")
load(file = 'args_model.RData') # loads all model information include prior parameters AND SETS SEED
set.seed(as.integer(idx*92920))  #  05-19-2020
# Simulation information
simulation <- read.csv(file = "args_simulation.csv", header = TRUE, sep = ",")
for(i in 1:ncol(simulation)){
assign(names(simulation)[i], simulation[idx, names(simulation)[i]])
}
# Simulations ---
vars  <- c("y1.IP", "y0.IP", "y1.PC", "y0.PC", "eff.prob", "fut.prob", "eff.mix.prob", "box.skpt", "box.enth", "box.ni")
suffix <- unique(c(seq(min.ss, max.ss, by = freq.mntr), max.ss))
final.inf.vars <- c("pm.skpt","pm.enth","pm.ni","pm.rd","pm.50.50","pm.skpt.enth","pm.skpt.enth.ni","pm.skpt.enth.ni.tilde","box.skpt","box.enth","box.ni","y1.IP","y1.PC","y0.IP","y0.PC")
final.inf.suffix <- "f"
names <- c(
# paste(expand.grid(vars,suffix)$Var1, expand.grid(vars,suffix)$Var2, sep = "."), # 06-10-21 added
paste(vars, "initial", sep = "."),
paste(vars, "final",   sep = "."),
paste(final.inf.vars, final.inf.suffix, sep = "."))
inner <- array(NA, dim = c(reps, length(names)), dimnames = list(seq_len(reps), names))
inner
for (i in 1:reps){
{print(paste0("IDX ", idx, ", Simulation ", i, ", eff_mix_prob ", eff.mix.prob))}
source("04_code_enrollment.R")
for (j in unique(c(seq(min.ss, max.ss, by = freq.mntr), max.ss))){
#for(j in max.ss){
#{print(paste0("Inner loop: ", j))}
n.initial          <- j
mon.result.initial <- monitoring(index = j)
futility           <- mon.result.initial$fut.prob
efficacy           <- mon.result.initial$eff.prob
# # 06-10-21 added
# for(k in 1:length(vars)){ inner[i, paste(vars[k], j, sep = ".")] <- as.numeric(mon.result.initial[vars[k]]) }
if (futility > sig.fut | efficacy > sig.eff){
break
}
}
# Initial
for(k in 1:length(vars)){ inner[i, paste(vars[k], "initial", sep = ".")] <- as.numeric(mon.result.initial[vars[k]]) }
# Final
if (is.na(p.IP)){
n.final                          <- dat[dat$targOutNum == n.initial, "nFin"]
} else {
cutoff.time                      <- outcome.times.all[n.initial]
n.final                          <- sum(enr.times.all <= cutoff.time)
}
mon.result.final                 <- monitoring(index = n.final) # calls prior_data_conflict(), takes time
for(k in 1:length(vars)){ inner[i, paste(vars[k], "final", sep = ".")] <- as.numeric(mon.result.final[vars[k]]) }
# inf.result.final                   <- inference(index = n.final)
# for(k in 1:length(final.inf.vars)){ inner[i, paste(final.inf.vars[k], "f", sep = ".")] <- as.numeric(inf.result.final[final.inf.vars[k]]) }
#
}
inner
j
dgnorm(x, delta.enth, enth.rd.alpha0, enth.rd.beta0, log = TRUE)
x
delta.enth
enth.rd.alpha0
enth.rd.beta0
enth.rd.alpha0
enth.rd.beta0
rm(list = ls())
idx <- 1
##############################
# setwd("/Users/kwiatkoe/Documents/Github/Bayesian-Sequential-Monitoring/Real FDA Data Example/MP_FDA_Check/code")
# for (idx in 1:8){ # check here
if (Sys.getenv("USER") %in% c("kwiatkoe", "ek50"))  {
library(pracma)
library(gnorm)
} else {                                    # longleaf
library(pracma, lib.loc = "../rpkgs/")
library(gnorm,  lib.loc = "../rpkgs/")
args <- commandArgs(trailingOnly = TRUE)  # sequence from batch file
idx  <- as.numeric(args[1]);
}
# Model information, including all functions used (The only additional source file to be called is "code_enrollment.R")
load(file = 'args_model.RData') # loads all model information include prior parameters AND SETS SEED
set.seed(as.integer(idx*92920))  #  05-19-2020
# Simulation information
simulation <- read.csv(file = "args_simulation.csv", header = TRUE, sep = ",")
for(i in 1:ncol(simulation)){
assign(names(simulation)[i], simulation[idx, names(simulation)[i]])
}
# Simulations ---
vars  <- c("y1.IP", "y0.IP", "y1.PC", "y0.PC", "eff.prob", "fut.prob", "eff.mix.prob", "box.skpt", "box.enth", "box.ni")
suffix <- unique(c(seq(min.ss, max.ss, by = freq.mntr), max.ss))
final.inf.vars <- c("pm.skpt","pm.enth","pm.ni","pm.rd","pm.50.50","pm.skpt.enth","pm.skpt.enth.ni","pm.skpt.enth.ni.tilde","box.skpt","box.enth","box.ni","y1.IP","y1.PC","y0.IP","y0.PC")
final.inf.suffix <- "f"
names <- c(
# paste(expand.grid(vars,suffix)$Var1, expand.grid(vars,suffix)$Var2, sep = "."), # 06-10-21 added
paste(vars, "initial", sep = "."),
paste(vars, "final",   sep = "."),
paste(final.inf.vars, final.inf.suffix, sep = "."))
inner <- array(NA, dim = c(reps, length(names)), dimnames = list(seq_len(reps), names))
enth.rd.alpha0
enth.rd.beta0
##################################
# Model parameters
# Evan Kwiatkowski, Feb 23, 2020
##################################
rm(list = ls())
if (Sys.getenv("USER") %in% c("kwiatkoe", "ek50")) {
library(pracma)
library(gnorm)
setwd("/Users/ek50/Documents/Github/Bayesian-Sequential-Monitoring/00-paper/FIGURES/riskdiff/code")
}
if (.Platform$OS.type == "unix")    {
library(pracma, lib.loc = "../rpkgs/")
library(gnorm,  lib.loc = "../rpkgs/")
}
delta.enth <- 0.12
delta.skpt <- 0
delta.intr <- (delta.skpt+delta.enth)/2
mu         <- 0.39
# sig.fut    <- 0.975
sig.fut    <- 1.1 # turning futility monitoring off # 12-21-21
sig.eff    <- 0.975
source("03_code_integrate.R")
source("06_code_functions.R") # contains nested source("code_posteriors.R", local = TRUE)
source("08_code_inference.R") # 2021-07-17
source("priors/03_enth_joint.R")
enth_joint()
source("priors/06_skpt_joint.R")
skpt_joint()
##################################
# Model parameters
# Evan Kwiatkowski, Feb 23, 2020
##################################
rm(list = ls())
if (Sys.getenv("USER") %in% c("kwiatkoe", "ek50")) {
library(pracma)
library(gnorm)
setwd("/Users/ek50/Documents/Github/Bayesian-Sequential-Monitoring/00-paper/FIGURES/riskdiff/code")
}
if (.Platform$OS.type == "unix")    {
library(pracma, lib.loc = "../rpkgs/")
library(gnorm,  lib.loc = "../rpkgs/")
}
delta.enth <- 0.12
delta.skpt <- 0
delta.intr <- (delta.skpt+delta.enth)/2
mu         <- 0.39
sig.fut    <- 0.975
sig.eff    <- 0.975
source("03_code_integrate.R")
source("06_code_functions.R") # contains nested source("code_posteriors.R", local = TRUE)
source("08_code_inference.R") # 2021-07-17
source("priors/03_enth_joint.R")
enth_joint()
rm(list = ls())
idx <- 1
if (Sys.getenv("USER") %in% c("kwiatkoe", "ek50"))  {
library(pracma)
library(gnorm)
} else {                                    # longleaf
library(pracma, lib.loc = "../rpkgs/")
library(gnorm,  lib.loc = "../rpkgs/")
args <- commandArgs(trailingOnly = TRUE)  # sequence from batch file
idx  <- as.numeric(args[1]);
}
# Model information, including all functions used (The only additional source file to be called is "code_enrollment.R")
load(file = 'args_model.RData') # loads all model information include prior parameters AND SETS SEED
set.seed(as.integer(idx*92920))  #  05-19-2020
# Simulation information
simulation <- read.csv(file = "args_simulation.csv", header = TRUE, sep = ",")
for(i in 1:ncol(simulation)){
assign(names(simulation)[i], simulation[idx, names(simulation)[i]])
}
# Simulations ---
vars  <- c("y1.IP", "y0.IP", "y1.PC", "y0.PC", "eff.prob", "fut.prob", "eff.mix.prob", "box.skpt", "box.enth", "box.ni")
suffix <- unique(c(seq(min.ss, max.ss, by = freq.mntr), max.ss))
final.inf.vars <- c("pm.skpt","pm.enth","pm.ni","pm.rd","pm.50.50","pm.skpt.enth","pm.skpt.enth.ni","pm.skpt.enth.ni.tilde","box.skpt","box.enth","box.ni","y1.IP","y1.PC","y0.IP","y0.PC")
final.inf.suffix <- "f"
names <- c(
# paste(expand.grid(vars,suffix)$Var1, expand.grid(vars,suffix)$Var2, sep = "."), # 06-10-21 added
paste(vars, "initial", sep = "."),
paste(vars, "final",   sep = "."),
paste(final.inf.vars, final.inf.suffix, sep = "."))
inner <- array(NA, dim = c(reps, length(names)), dimnames = list(seq_len(reps), names))
inner
for (i in 1:reps){
{print(paste0("IDX ", idx, ", Simulation ", i, ", eff_mix_prob ", eff.mix.prob))}
source("04_code_enrollment.R")
for (j in unique(c(seq(min.ss, max.ss, by = freq.mntr), max.ss))){
#for(j in max.ss){
#{print(paste0("Inner loop: ", j))}
n.initial          <- j
mon.result.initial <- monitoring(index = j)
futility           <- mon.result.initial$fut.prob
efficacy           <- mon.result.initial$eff.prob
# # 06-10-21 added
# for(k in 1:length(vars)){ inner[i, paste(vars[k], j, sep = ".")] <- as.numeric(mon.result.initial[vars[k]]) }
if (futility > sig.fut | efficacy > sig.eff){
break
}
}
# Initial
for(k in 1:length(vars)){ inner[i, paste(vars[k], "initial", sep = ".")] <- as.numeric(mon.result.initial[vars[k]]) }
# Final
if (is.na(p.IP)){
n.final                          <- dat[dat$targOutNum == n.initial, "nFin"]
} else {
cutoff.time                      <- outcome.times.all[n.initial]
n.final                          <- sum(enr.times.all <= cutoff.time)
}
mon.result.final                 <- monitoring(index = n.final) # calls prior_data_conflict(), takes time
for(k in 1:length(vars)){ inner[i, paste(vars[k], "final", sep = ".")] <- as.numeric(mon.result.final[vars[k]]) }
# inf.result.final                   <- inference(index = n.final)
# for(k in 1:length(final.inf.vars)){ inner[i, paste(final.inf.vars[k], "f", sep = ".")] <- as.numeric(inf.result.final[final.inf.vars[k]]) }
#
}
eff.mix.prob
enth.rd.alpha0
##################################
# Model parameters
# Evan Kwiatkowski, Feb 23, 2020
##################################
rm(list = ls())
if (Sys.getenv("USER") %in% c("kwiatkoe", "ek50")) {
library(pracma)
library(gnorm)
setwd("/Users/ek50/Documents/Github/Bayesian-Sequential-Monitoring/00-paper/FIGURES/riskdiff/code")
}
if (.Platform$OS.type == "unix")    {
library(pracma, lib.loc = "../rpkgs/")
library(gnorm,  lib.loc = "../rpkgs/")
}
delta.enth <- 0.12
delta.skpt <- 0
delta.intr <- (delta.skpt+delta.enth)/2
mu         <- 0.39
sig.fut    <- 0.975
sig.eff    <- 0.975
source("03_code_integrate.R")
source("06_code_functions.R") # contains nested source("code_posteriors.R", local = TRUE)
source("08_code_inference.R") # 2021-07-17
source("priors/03_enth_joint.R")
enth_joint()
source("priors/06_skpt_joint.R")
skpt_joint()
## based on skpt prior -- measures upper tail and upper half
delta.ni.enth <- 0.42   ## new upper
delta.ni.skpt <- 0.06   ## new modal value
delta.ni.intr <- 0.24   ## new halfway point
#delta.ni.enth <- (3*delta.enth-delta.skpt)/2 ## new upper
#delta.ni.skpt <- (delta.skpt+delta.enth)/2   ## new modal value
#delta.ni.intr <- delta.enth                  ## new halfway point
source("priors/09_ni_joint.R")
ni_joint()
# December 2021
skpt.alpha0    <- 1E3
skpt.rd.alpha0 <- 1E3
save.image(file = 'args_model.RData')
rm(list = ls())
idx <- 1
if (Sys.getenv("USER") %in% c("kwiatkoe", "ek50"))  {
library(pracma)
library(gnorm)
} else {                                    # longleaf
library(pracma, lib.loc = "../rpkgs/")
library(gnorm,  lib.loc = "../rpkgs/")
args <- commandArgs(trailingOnly = TRUE)  # sequence from batch file
idx  <- as.numeric(args[1]);
}
# Model information, including all functions used (The only additional source file to be called is "code_enrollment.R")
load(file = 'args_model.RData') # loads all model information include prior parameters AND SETS SEED
set.seed(as.integer(idx*92920))  #  05-19-2020
# Simulation information
simulation <- read.csv(file = "args_simulation.csv", header = TRUE, sep = ",")
for(i in 1:ncol(simulation)){
assign(names(simulation)[i], simulation[idx, names(simulation)[i]])
}
# Simulations ---
vars  <- c("y1.IP", "y0.IP", "y1.PC", "y0.PC", "eff.prob", "fut.prob", "eff.mix.prob", "box.skpt", "box.enth", "box.ni")
suffix <- unique(c(seq(min.ss, max.ss, by = freq.mntr), max.ss))
final.inf.vars <- c("pm.skpt","pm.enth","pm.ni","pm.rd","pm.50.50","pm.skpt.enth","pm.skpt.enth.ni","pm.skpt.enth.ni.tilde","box.skpt","box.enth","box.ni","y1.IP","y1.PC","y0.IP","y0.PC")
final.inf.suffix <- "f"
names <- c(
# paste(expand.grid(vars,suffix)$Var1, expand.grid(vars,suffix)$Var2, sep = "."), # 06-10-21 added
paste(vars, "initial", sep = "."),
paste(vars, "final",   sep = "."),
paste(final.inf.vars, final.inf.suffix, sep = "."))
inner <- array(NA, dim = c(reps, length(names)), dimnames = list(seq_len(reps), names))
inner
for (i in 1:reps){
{print(paste0("IDX ", idx, ", Simulation ", i, ", eff_mix_prob ", eff.mix.prob))}
source("04_code_enrollment.R")
for (j in unique(c(seq(min.ss, max.ss, by = freq.mntr), max.ss))){
#for(j in max.ss){
#{print(paste0("Inner loop: ", j))}
n.initial          <- j
mon.result.initial <- monitoring(index = j)
futility           <- mon.result.initial$fut.prob
efficacy           <- mon.result.initial$eff.prob
# # 06-10-21 added
# for(k in 1:length(vars)){ inner[i, paste(vars[k], j, sep = ".")] <- as.numeric(mon.result.initial[vars[k]]) }
if (futility > sig.fut | efficacy > sig.eff){
break
}
}
# Initial
for(k in 1:length(vars)){ inner[i, paste(vars[k], "initial", sep = ".")] <- as.numeric(mon.result.initial[vars[k]]) }
# Final
if (is.na(p.IP)){
n.final                          <- dat[dat$targOutNum == n.initial, "nFin"]
} else {
cutoff.time                      <- outcome.times.all[n.initial]
n.final                          <- sum(enr.times.all <= cutoff.time)
}
mon.result.final                 <- monitoring(index = n.final) # calls prior_data_conflict(), takes time
for(k in 1:length(vars)){ inner[i, paste(vars[k], "final", sep = ".")] <- as.numeric(mon.result.final[vars[k]]) }
# inf.result.final                   <- inference(index = n.final)
# for(k in 1:length(final.inf.vars)){ inner[i, paste(final.inf.vars[k], "f", sep = ".")] <- as.numeric(inf.result.final[final.inf.vars[k]]) }
#
}
inner
800*15
#####################################
# Simulation parameters
# Evan Kwiatkowski, Feb 23, 2020
#
# The (fut|eff).mix.prob weights are
# assigned to the SKEPTICAL component
#####################################
# setwd("/Users/kwiatkoe/Documents/Github/Bayesian-Sequential-Monitoring/Real FDA Data Example/MP_FDA_Check/code")
rm(list = ls())
# simulation <- expand.grid(
#  NA, # p.IP
#  NA, # p.PC
#  2,   # freq.mntr
#  1,   # enr.shape
#  4,   # out.mean
#  0,   # fut.mix.prob
#  rep(101, 2067), # eff.mix.prob
#  # c(rep(103, 114)), # eff.mix.prob
#  0.5,  # inf.mix.prob
#  0.05, # cred.tail
#  90,  # max.ss
#  90,   # min.ss
#  1)   # reps
# simulation2 <- expand.grid(
#  .63, # p.IP
#  .39, # p.PC
#  2,   # freq.mntr
#  1,   # enr.shape
#  4,   # out.mean
#  0,   # fut.mix.prob
#  c(1, 0.5, 101, 130), # eff.mix.prob
#  0.5,  # inf.mix.prob
#  0.05, # cred.tail
#  100,  # max.ss
#  50,   # min.ss
#  2)   # reps
#
# simulation <- rbind(simulation1, simulation2)
#
# simulation <- expand.grid(
#   #seq(.27, 0.63, length = 7), # p.IP
#   # .39, # p.PC
#   NA,
#   NA,
#   2,   # freq.mntr
#   1,   # enr.shape
#   4,   # out.mean
#   0,   # fut.mix.prob
#   # c(seq(1, 0, by = -0.05), 10, 20, 21, 22, 23, 24, 30), # eff.mix.prob
#   c(seq(1, 0, by = -0.05), 101:130), # eff.mix.prob
#   0.5,  # inf.mix.prob
#   0.05, # cred.tail
#   92,  # max.ss
#   50,   # min.ss
#   1)   # reps
## December 2021
simulation <- expand.grid(
# seq(.27, 0.63, length = 7), # p.IP
.39, # p.IP
.39, # p.PC
# NA,
# NA,
2,   # freq.mntr
1,   # enr.shape
4,   # out.mean
0,   # fut.mix.prob
rep(1, 800),   # eff.mix.prob
# c(seq(1, 0, by = -0.05), 10, 20, 21, 22, 23, 24, 30), # eff.mix.prob
# c(seq(1, 0, by = -0.05), 101:130), # eff.mix.prob
0.5,  # inf.mix.prob
0.05, # cred.tail
92,  # max.ss
92,   # min.ss
15)   # reps
names(simulation) <- c(
"p.IP",
"p.PC",
"freq.mntr",
"enr.shape",
"out.mean",
"fut.mix.prob",
"eff.mix.prob",
"inf.mix.prob",
"cred.tail",
"max.ss",
"min.ss",
"reps")
write.csv(x    = simulation, file = "args_simulation.csv")
simulation
