s        = rwmetrop(logpost, proposal, start, nmcmc)
mcmc     = mcmc(s$par[-c(1:burn_in),])
summary(mcmc)
rm(list = ls())
library(survival)
library(LearnBayes)
library(MCMCpack)
library(Renext)
library(mixtools)
# mcmc parameters
M       <- 20000
burn_in <- 10000
nmcmc   <- M + burn_in
# weight
a <- 0.55
logpost <- function(theta){
dnorm(log(1.5), mean = theta, sd = sqrt(0.178), log = TRUE) + log((1 - a)*dnorm(theta, 0, sd = sqrt(8.27)) + a*dnorm(theta, 0.48, sd = sqrt(0.015)))
}
start <- 0
laplace  = laplace(logpost, start) # change to data.all
proposal = list(var = laplace$var, scale = 1)
s        = rwmetrop(logpost, proposal, start, nmcmc)
mcmc     = mcmc(s$par[-c(1:burn_in),])
summary(mcmc)
rm(list = ls())
library(survival)
library(LearnBayes)
library(MCMCpack)
library(Renext)
library(mixtools)
# mcmc parameters
M       <- 20000
burn_in <- 10000
nmcmc   <- M + burn_in
# weight
a <- 0.56
logpost <- function(theta){
dnorm(log(1.5), mean = theta, sd = sqrt(0.178), log = TRUE) + log((1 - a)*dnorm(theta, 0, sd = sqrt(8.27)) + a*dnorm(theta, 0.48, sd = sqrt(0.015)))
}
start <- 0
laplace  = laplace(logpost, start) # change to data.all
proposal = list(var = laplace$var, scale = 1)
s        = rwmetrop(logpost, proposal, start, nmcmc)
mcmc     = mcmc(s$par[-c(1:burn_in),])
summary(mcmc)
rm(list = ls())
library(survival)
library(LearnBayes)
library(MCMCpack)
library(Renext)
library(mixtools)
# mcmc parameters
M       <- 20000
burn_in <- 10000
nmcmc   <- M + burn_in
# weight
a <- 0.56
logpost <- function(theta){
dnorm(log(1.5), mean = theta, sd = sqrt(0.178), log = TRUE) + log((1 - a)*dnorm(theta, 0, sd = sqrt(8.27)) + a*dnorm(theta, 0.48, sd = sqrt(0.015)))
}
start <- 0
laplace  = laplace(logpost, start) # change to data.all
proposal = list(var = laplace$var, scale = 1)
s        = rwmetrop(logpost, proposal, start, nmcmc)
mcmc     = mcmc(s$par[-c(1:burn_in),])
summary(mcmc)
rm(list = ls())
library(survival)
library(LearnBayes)
library(MCMCpack)
library(Renext)
library(mixtools)
# mcmc parameters
M       <- 20000
burn_in <- 10000
nmcmc   <- M + burn_in
# weight
a <- 0.56
logpost <- function(theta){
dnorm(log(1.5), mean = theta, sd = sqrt(0.178), log = TRUE) + log((1 - a)*dnorm(theta, 0, sd = sqrt(8.27)) + a*dnorm(theta, 0.48, sd = sqrt(0.015)))
}
start <- 0
laplace  = laplace(logpost, start) # change to data.all
proposal = list(var = laplace$var, scale = 1)
s        = rwmetrop(logpost, proposal, start, nmcmc)
mcmc     = mcmc(s$par[-c(1:burn_in),])
summary(mcmc)
rm(list = ls())
library(survival)
library(LearnBayes)
library(MCMCpack)
library(Renext)
library(mixtools)
# mcmc parameters
M       <- 20000
burn_in <- 10000
nmcmc   <- M + burn_in
# weight
a <- 0.55
logpost <- function(theta){
dnorm(log(1.5), mean = theta, sd = sqrt(0.178), log = TRUE) + log((1 - a)*dnorm(theta, 0, sd = sqrt(8.27)) + a*dnorm(theta, 0.48, sd = sqrt(0.015)))
}
start <- 0
laplace  = laplace(logpost, start) # change to data.all
proposal = list(var = laplace$var, scale = 1)
s        = rwmetrop(logpost, proposal, start, nmcmc)
mcmc     = mcmc(s$par[-c(1:burn_in),])
summary(mcmc)
rm(list = ls())
library(survival)
library(LearnBayes)
library(MCMCpack)
library(Renext)
library(mixtools)
# mcmc parameters
M       <- 20000
burn_in <- 10000
nmcmc   <- M + burn_in
# weight
a <- 0.55
logpost <- function(theta){
dnorm(log(1.5), mean = theta, sd = sqrt(0.178), log = TRUE) + log((1 - a)*dnorm(theta, 0, sd = sqrt(8.27)) + a*dnorm(theta, 0.48, sd = sqrt(0.015)))
}
start <- 0
laplace  = laplace(logpost, start) # change to data.all
proposal = list(var = laplace$var, scale = 1)
s        = rwmetrop(logpost, proposal, start, nmcmc)
mcmc     = mcmc(s$par[-c(1:burn_in),])
summary(mcmc)
rm(list = ls())
library(survival)
library(LearnBayes)
library(MCMCpack)
library(Renext)
library(mixtools)
# mcmc parameters
M       <- 20000
burn_in <- 10000
nmcmc   <- M + burn_in
# weight
a <- 0.55
logpost <- function(theta){
dnorm(log(1.5), mean = theta, sd = sqrt(0.178), log = TRUE) + log((1 - a)*dnorm(theta, 0, sd = sqrt(8.27)) + a*dnorm(theta, 0.48, sd = sqrt(0.015)))
}
start <- 0
laplace  = laplace(logpost, start) # change to data.all
proposal = list(var = laplace$var, scale = 1)
s        = rwmetrop(logpost, proposal, start, nmcmc)
mcmc     = mcmc(s$par[-c(1:burn_in),])
summary(mcmc)
rm(list = ls())
library(survival)
library(LearnBayes)
library(MCMCpack)
library(Renext)
library(mixtools)
# mcmc parameters
M       <- 20000
burn_in <- 10000
nmcmc   <- M + burn_in
# weight
a <- 0.55
logpost <- function(theta){
dnorm(log(1.5), mean = theta, sd = sqrt(0.178), log = TRUE) + log((1 - a)*dnorm(theta, 0, sd = sqrt(8.27)) + a*dnorm(theta, 0.48, sd = sqrt(0.015)))
}
start <- 0
laplace  = laplace(logpost, start) # change to data.all
proposal = list(var = laplace$var, scale = 1)
s        = rwmetrop(logpost, proposal, start, nmcmc)
mcmc     = mcmc(s$par[-c(1:burn_in),])
summary(mcmc)
rm(list = ls())
library(survival)
library(LearnBayes)
library(MCMCpack)
library(Renext)
library(mixtools)
# mcmc parameters
M       <- 20000
burn_in <- 10000
nmcmc   <- M + burn_in
# weight
a <- 0.55
logpost <- function(theta){
dnorm(log(1.5), mean = theta, sd = sqrt(0.178), log = TRUE) + log((1 - a)*dnorm(theta, 0, sd = sqrt(8.27)) + a*dnorm(theta, 0.48, sd = sqrt(0.015)))
}
start <- 0
laplace  = laplace(logpost, start) # change to data.all
proposal = list(var = laplace$var, scale = 1)
s        = rwmetrop(logpost, proposal, start, nmcmc)
mcmc     = mcmc(s$par[-c(1:burn_in),])
summary(mcmc)
rm(list = ls())
library(survival)
library(LearnBayes)
library(MCMCpack)
library(Renext)
library(mixtools)
# mcmc parameters
M       <- 20000
burn_in <- 10000
nmcmc   <- M + burn_in
# weight
a <- 0.55
logpost <- function(theta){
dnorm(log(1.5), mean = theta, sd = sqrt(0.178), log = TRUE) + log((1 - a)*dnorm(theta, 0, sd = sqrt(8.27)) + a*dnorm(theta, 0.48, sd = sqrt(0.015)))
}
start <- 0
laplace  = laplace(logpost, start) # change to data.all
proposal = list(var = laplace$var, scale = 1)
s        = rwmetrop(logpost, proposal, start, nmcmc)
mcmc     = mcmc(s$par[-c(1:burn_in),])
summary(mcmc)
rm(list = ls())
library(survival)
library(LearnBayes)
library(MCMCpack)
library(Renext)
library(mixtools)
# mcmc parameters
M       <- 20000
burn_in <- 10000
nmcmc   <- M + burn_in
# weight
a <- 0.55
logpost <- function(theta){
dnorm(log(1.5), mean = theta, sd = sqrt(0.178), log = TRUE) + log((1 - a)*dnorm(theta, 0, sd = sqrt(8.27)) + a*dnorm(theta, 0.48, sd = sqrt(0.015)))
}
start <- 0
laplace  = laplace(logpost, start) # change to data.all
proposal = list(var = laplace$var, scale = 1)
s        = rwmetrop(logpost, proposal, start, nmcmc)
mcmc     = mcmc(s$par[-c(1:burn_in),])
summary(mcmc)
rm(list = ls())
library(survival)
library(LearnBayes)
library(MCMCpack)
library(Renext)
library(mixtools)
# mcmc parameters
M       <- 20000
burn_in <- 10000
nmcmc   <- M + burn_in
# weight
a <- 0.55
logpost <- function(theta){
dnorm(log(1.5), mean = theta, sd = sqrt(0.178), log = TRUE) + log((1 - a)*dnorm(theta, 0, sd = sqrt(8.27)) + a*dnorm(theta, 0.48, sd = sqrt(0.015)))
}
start <- 0
laplace  = laplace(logpost, start) # change to data.all
proposal = list(var = laplace$var, scale = 1)
s        = rwmetrop(logpost, proposal, start, nmcmc)
mcmc     = mcmc(s$par[-c(1:burn_in),])
summary(mcmc)
rm(list = ls())
library(survival)
library(LearnBayes)
library(MCMCpack)
library(Renext)
library(mixtools)
# mcmc parameters
M       <- 20000
burn_in <- 10000
nmcmc   <- M + burn_in
# weight
a <- 0.55
logpost <- function(theta){
dnorm(log(1.5), mean = theta, sd = sqrt(0.178), log = TRUE) + log((1 - a)*dnorm(theta, 0, sd = sqrt(8.27)) + a*dnorm(theta, 0.48, sd = sqrt(0.015)))
}
start <- 0
laplace  = laplace(logpost, start) # change to data.all
proposal = list(var = laplace$var, scale = 1)
s        = rwmetrop(logpost, proposal, start, nmcmc)
mcmc     = mcmc(s$par[-c(1:burn_in),])
summary(mcmc)
rm(list = ls())
library(survival)
library(LearnBayes)
library(MCMCpack)
library(Renext)
library(mixtools)
# mcmc parameters
M       <- 1E6
burn_in <- 1E5
nmcmc   <- M + burn_in
# weight
a <- 0.55
logpost <- function(theta){
dnorm(log(1.5), mean = theta, sd = sqrt(0.178), log = TRUE) + log((1 - a)*dnorm(theta, 0, sd = sqrt(8.27)) + a*dnorm(theta, 0.48, sd = sqrt(0.015)))
}
start <- 0
laplace  = laplace(logpost, start) # change to data.all
proposal = list(var = laplace$var, scale = 1)
s        = rwmetrop(logpost, proposal, start, nmcmc)
mcmc     = mcmc(s$par[-c(1:burn_in),])
summary(mcmc)
?laplace
?mcmc
rm(list = ls())
#library(survival)
library(LearnBayes)
#ibrary(MCMCpack)
#library(Renext)
#library(mixtools)
# mcmc parameters
M       <- 1E6
burn_in <- 1E5
nmcmc   <- M + burn_in
# weight
a <- 0.55
logpost <- function(theta){
dnorm(log(1.5), mean = theta, sd = sqrt(0.178), log = TRUE) + log((1 - a)*dnorm(theta, 0, sd = sqrt(8.27)) + a*dnorm(theta, 0.48, sd = sqrt(0.015)))
}
start <- 0
laplace  = laplace(logpost, start) # change to data.all
proposal = list(var = laplace$var, scale = 1)
s        = rwmetrop(logpost, proposal, start, nmcmc)
mcmc     = mcmc(s$par[-c(1:burn_in),])
summary(mcmc)
rm(list = ls())
library(LearnBayes)
ibrary(MCMCpack)
# mcmc parameters
M       <- 1E6
burn_in <- 1E5
nmcmc   <- M + burn_in
# weight
a <- 0.55
logpost <- function(theta){
dnorm(log(1.5), mean = theta, sd = sqrt(0.178), log = TRUE) + log((1 - a)*dnorm(theta, 0, sd = sqrt(8.27)) + a*dnorm(theta, 0.48, sd = sqrt(0.015)))
}
start <- 0
laplace  = laplace(logpost, start) # change to data.all
proposal = list(var = laplace$var, scale = 1)
s        = rwmetrop(logpost, proposal, start, nmcmc)
mcmc     = mcmc(s$par[-c(1:burn_in),])
summary(mcmc)
library(MCMCpack)
mcmc     <- mcmc(s$par[-c(1:burn_in),])
summary(mcmc)
# weight
a <- 0
logpost <- function(theta){
dnorm(log(1.5), mean = theta, sd = sqrt(0.178), log = TRUE) + log((1 - a)*dnorm(theta, 0, sd = sqrt(8.27)) + a*dnorm(theta, 0.48, sd = sqrt(0.015)))
}
start    <- 0
laplace  <- aplace(logpost, start) # change to data.all
proposal <- list(var = laplace$var, scale = 1)
s        <- rwmetrop(logpost, proposal, start, nmcmc)
mcmc     <- mcmc(s$par[-c(1:burn_in),])
summary(mcmc)
rm(list = ls())
library(LearnBayes)
library(MCMCpack)
# mcmc parameters
M       <- 1E7
burn_in <- 1E6
nmcmc   <- M + burn_in
# weight
a <- 0
logpost <- function(theta){
dnorm(log(1.5), mean = theta, sd = sqrt(0.178), log = TRUE) + log((1 - a)*dnorm(theta, 0, sd = sqrt(8.27)) + a*dnorm(theta, 0.48, sd = sqrt(0.015)))
}
start    <- 0
laplace  <- laplace(logpost, start) # change to data.all
proposal <- list(var = laplace$var, scale = 1)
s        <- rwmetrop(logpost, proposal, start, nmcmc)
mcmc     <- mcmc(s$par[-c(1:burn_in),])
summary(mcmc)
# weight
a <- 1
logpost <- function(theta){
dnorm(log(1.5), mean = theta, sd = sqrt(0.178), log = TRUE) + log((1 - a)*dnorm(theta, 0, sd = sqrt(8.27)) + a*dnorm(theta, 0.48, sd = sqrt(0.015)))
}
start    <- 0
laplace  <- laplace(logpost, start) # change to data.all
proposal <- list(var = laplace$var, scale = 1)
s        <- rwmetrop(logpost, proposal, start, nmcmc)
mcmc     <- mcmc(s$par[-c(1:burn_in),])
summary(mcmc)
a <- 0.55
logpost <- function(theta){
dnorm(log(1.5), mean = theta, sd = sqrt(0.178), log = TRUE) + log((1 - a)*dnorm(theta, 0, sd = sqrt(8.27)) + a*dnorm(theta, 0.48, sd = sqrt(0.015)))
}
start    <- 0
laplace  <- laplace(logpost, start) # change to data.all
proposal <- list(var = laplace$var, scale = 1)
s        <- rwmetrop(logpost, proposal, start, nmcmc)
mcmc     <- mcmc(s$par[-c(1:burn_in),])
summary(mcmc)
rm(list = ls())
library(LearnBayes)
library(MCMCpack)
# mcmc parameters
M       <- 1E5
burn_in <- 1E4
nmcmc   <- M + burn_in
# weight
for (a in c(0, 0.55, 1)){
logpost <- function(theta){
dnorm(log(1.5), mean = theta, sd = sqrt(0.178), log = TRUE) + log((1 - a)*dnorm(theta, 0, sd = sqrt(8.27)) + a*dnorm(theta, 0.48, sd = sqrt(0.015)))
}
start    <- 0
laplace  <- laplace(logpost, start) # change to data.all
proposal <- list(var = laplace$var, scale = 1)
s        <- rwmetrop(logpost, proposal, start, nmcmc)
mcmc     <- mcmc(s$par[-c(1:burn_in),])
print(summary(mcmc))
}
rm(list = ls())
library(LearnBayes)
library(MCMCpack)
# mcmc parameters
M       <- 1E7
burn_in <- 1E6
nmcmc   <- M + burn_in
# weight
for (a in c(0, 0.55, 1)){
logpost <- function(theta){
dnorm(log(1.5), mean = theta, sd = sqrt(0.178), log = TRUE) + log((1 - a)*dnorm(theta, 0, sd = sqrt(8.27)) + a*dnorm(theta, 0.48, sd = sqrt(0.015)))
}
start    <- 0
laplace  <- laplace(logpost, start) # change to data.all
proposal <- list(var = laplace$var, scale = 1)
s        <- rwmetrop(logpost, proposal, start, nmcmc)
mcmc     <- mcmc(s$par[-c(1:burn_in),])
print(summary(mcmc))
}
rm(list = ls())
library(LearnBayes)
library(MCMCpack)
# mcmc parameters
M       <- 1E6
burn_in <- 1E5
nmcmc   <- M + burn_in
# weight
for (a in c(0, 0.55, 1)){
logpost <- function(theta){
dnorm(log(1.5), mean = theta, sd = sqrt(0.178), log = TRUE) + log((1 - a)*dnorm(theta, 0, sd = sqrt(8.27)) + a*dnorm(theta, 0.48, sd = sqrt(0.015)))
}
start    <- 0
laplace  <- laplace(logpost, start) # change to data.all
proposal <- list(var = laplace$var, scale = 1)
s        <- rwmetrop(logpost, proposal, start, nmcmc)
mcmc     <- mcmc(s$par[-c(1:burn_in),])
print(summary(mcmc))
}
rm(list = ls())
library(LearnBayes)
library(MCMCpack)
# mcmc parameters
M       <- 1E6
burn_in <- 1E5
nmcmc   <- M + burn_in
# weight
for (a in c(0, 0.55, 1)){
logpost <- function(theta){
dnorm(log(1.5), mean = theta, sd = sqrt(0.178), log = TRUE) + log((1 - a)*dnorm(theta, 0, sd = sqrt(8.27/93)) + a*dnorm(theta, 0.48, sd = sqrt(0.015)))
}
start    <- 0
laplace  <- laplace(logpost, start) # change to data.all
proposal <- list(var = laplace$var, scale = 1)
s        <- rwmetrop(logpost, proposal, start, nmcmc)
mcmc     <- mcmc(s$par[-c(1:burn_in),])
print(summary(mcmc))
}
# 1. Empirical mean and standard deviation for each variable,
# plus standard error of the mean:
#
#   Mean             SD       Naive SE Time-series SE
# 0.3965211      0.4173208      0.0001320      0.0003802
#
# 2. Quantiles for each variable:
#
#   2.5%     25%     50%     75%   97.5%
# -0.4226  0.1154  0.3967  0.6779  1.2131
#
# 1. Empirical mean and standard deviation for each variable,
# plus standard error of the mean:
#
#   Mean             SD       Naive SE Time-series SE
# 4.655e-01      1.802e-01      5.697e-05      3.211e-04
#
# 2. Quantiles for each variable:
#
#   2.5%    25%    50%    75%  97.5%
# 0.0738 0.3835 0.4716 0.5583 0.7752
#
# 1. Empirical mean and standard deviation for each variable,
# plus standard error of the mean:
#
#   Mean             SD       Naive SE Time-series SE
# 4.742e-01      1.177e-01      3.721e-05      1.073e-04
#
# 2. Quantiles for each variable:
#
#   2.5%    25%    50%    75%  97.5%
# 0.2437 0.3948 0.4741 0.5535 0.7050
(110+118+148+167)/(271+273+288+290)
(167+118)/(273+290)
(93+125)/(275+287)
(118+167)/(273+290)
(110+148)/(271+288)
(110+118+148+167)/(271+273+288+290)
exp(0.48)
log(1.6)
log(1.62)
0.48 + 1.96*sqrt(0.015)
0.48 - 1.96*sqrt(0.015)
exp(0.48 - 1.96*sqrt(0.015))
exp(0.48 + 1.96*sqrt(0.015))
