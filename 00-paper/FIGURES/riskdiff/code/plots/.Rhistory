y0.IP        <- 58 - y11
Table0       <- data.frame(y1.IP, y0.IP)
# create data matrix
y1.IP        <- seq(0, 58)
y0.IP        <- 58 - y1.IP
Table0       <- data.frame(y1.IP, y0.IP)
Table0
rm(list=ls())
############################################################################################################################################
############################################################################################################################################
############################################################################################################################################
setwd("/Users/kwiatkoe/Documents/GitHub/Bayesian-Sequential-Monitoring/00-paper/FIGURES/riskdiff/code/plots/")
load(file = '../args_model.RData') # loads all model information include prior parameters AND SETS SEED
# create data matrix
y1.IP        <- seq(0, 58)
y0.IP        <- 58 - y1.IP
Table0       <- data.frame(y1.IP, y0.IP)
Table0$y1.PC <- 16
Table0$y0.PC <- 26
rm(list=ls())
############################################################################################################################################
############################################################################################################################################
############################################################################################################################################
setwd("/Users/kwiatkoe/Documents/GitHub/Bayesian-Sequential-Monitoring/00-paper/FIGURES/riskdiff/code/plots/")
load(file = '../args_model.RData') # loads all model information include prior parameters AND SETS SEED
# create data matrix
y1.IP        <- seq(0, 58)
y0.IP        <- 58 - y1.IP
Table0       <- data.frame(y1.IP, y0.IP)
Table0$y1.PC <- 16
Table0$y0.PC <- 26
prior_dat_conflict <- function(y1.IP, y0.IP, y1.PC, y0.PC){
skpt.post.nc       <- matrix(NA,
nrow = y1.IP + y0.IP + 1,
ncol = y1.PC + y0.PC + 1)
enth.post.nc       <- matrix(NA,
nrow = y1.IP + y0.IP + 1,
ncol = y1.PC + y0.PC + 1)
ni.post.nc         <- matrix(NA,
nrow = y1.IP + y0.IP + 1,
ncol = y1.PC + y0.PC + 1)
for (i in 1:(y1.IP + y0.IP + 1)){
for (j in 1:(y1.PC + y0.PC + 1)){
skpt.post.1   <- function(x, y){
exp(
dbinom(i-1,   y1.IP + y0.IP, x + y, log = TRUE) +
dbinom(j-1, y1.PC + y0.PC, y, log = TRUE) +
dgnorm(x,            delta.skpt, skpt.rd.alpha0, skpt.rd.beta0, log = TRUE) -
log(pgnorm(q = 1,    delta.skpt, skpt.rd.alpha0, skpt.rd.beta0) -
pgnorm(q = -1, delta.skpt, skpt.rd.alpha0, skpt.rd.beta0)) +
dgnorm(y,            mu, skpt.alpha0, skpt.beta0, log = TRUE) -
log(pgnorm(q = 1-x,  mu, skpt.alpha0, skpt.beta0) -
pgnorm(q = 0,  mu, skpt.alpha0, skpt.beta0))
)
}
skpt.post.2   <- function(x, y){
exp(
dbinom(i-1,   y1.IP + y0.IP, x + y, log = TRUE) +
dbinom(j-1, y1.PC + y0.PC, y, log = TRUE) +
dgnorm(x,            delta.skpt, skpt.rd.alpha0, skpt.rd.beta0, log = TRUE) -
log(pgnorm(q = 1,    delta.skpt, skpt.rd.alpha0, skpt.rd.beta0) -
pgnorm(q = -1, delta.skpt, skpt.rd.alpha0, skpt.rd.beta0)) +
dgnorm(y,            mu, skpt.alpha0, skpt.beta0, log = TRUE) -
log(pgnorm(q = 1,    mu, skpt.alpha0, skpt.beta0) -
pgnorm(q = -x, mu, skpt.alpha0, skpt.beta0))
)
}
skpt.post.nc[i, j] <- integrate_debug(skpt.post.1, xmin = 0,  xmax = 1, ymin = 0, ymax = function(x) 1 - x) +
integrate_debug(skpt.post.2, xmin = -1, xmax = 0, ymin = function(x) -x, ymax = 1)
enth.post.1   <- function(x, y){
exp(
dbinom(i-1,   y1.IP + y0.IP, x + y, log = TRUE) +
dbinom(j-1, y1.PC + y0.PC, y, log = TRUE) +
dgnorm(x,            delta.enth, enth.rd.alpha0, enth.rd.beta0, log = TRUE) -
log(pgnorm(q = 1,    delta.enth, enth.rd.alpha0, enth.rd.beta0) -
pgnorm(q = -1, delta.enth, enth.rd.alpha0, enth.rd.beta0)) +
dgnorm(y,            mu, enth.alpha0, enth.beta0, log = TRUE) -
log(pgnorm(q = 1-x,  mu, enth.alpha0, enth.beta0) -
pgnorm(q = 0,  mu, enth.alpha0, enth.beta0))
)
}
enth.post.2   <- function(x, y){
exp(
dbinom(i-1,   y1.IP + y0.IP, x + y, log = TRUE) +
dbinom(j-1, y1.PC + y0.PC, y, log = TRUE) +
dgnorm(x,            delta.enth, enth.rd.alpha0, enth.rd.beta0, log = TRUE) -
log(pgnorm(q = 1,    delta.enth, enth.rd.alpha0, enth.rd.beta0) -
pgnorm(q = -1, delta.enth, enth.rd.alpha0, enth.rd.beta0)) +
dgnorm(y,            mu, enth.alpha0, enth.beta0, log = TRUE) -
log(pgnorm(q = 1,    mu, enth.alpha0, enth.beta0) -
pgnorm(q = -x, mu, enth.alpha0, enth.beta0))
)
}
enth.post.nc[i, j] <- integrate_debug(enth.post.1, xmin = 0,  xmax = 1, ymin = 0, ymax = function(x) 1 - x) +
integrate_debug(enth.post.2, xmin = -1, xmax = 0, ymin = function(x) -x, ymax = 1)
ni.post.1 <- function(x, y){ # for x > 0 (theta > 0)
exp(
dbinom(i-1,   y1.IP + y0.IP, x + y, log = TRUE) +
dbinom(j-1, y1.PC + y0.PC, y, log = TRUE) +
dgnorm(x,            delta.ni.skpt, ni.rd.alpha0, ni.rd.beta0, log = TRUE) -
log(pgnorm(q = 1,  delta.ni.skpt, ni.rd.alpha0, ni.rd.beta0) -
pgnorm(q = -1,  delta.ni.skpt, ni.rd.alpha0, ni.rd.beta0)) +
dgnorm(y,          mu,            ni.alpha0,    ni.beta0, log = TRUE) -
log(pgnorm(q = 1-x,mu,            ni.alpha0,    ni.beta0) -
pgnorm(q = 0,   mu,            ni.alpha0,    ni.beta0))
)
}
ni.post.2 <- function(x, y){ # for x < 0 (theta < 0)
exp(
dbinom(i-1,   y1.IP + y0.IP, x + y, log = TRUE) +
dbinom(j-1, y1.PC + y0.PC, y, log = TRUE) +
dgnorm(x,           delta.ni.skpt, ni.rd.alpha0, ni.rd.beta0, log = TRUE) -
log(pgnorm(q = 1, delta.ni.skpt, ni.rd.alpha0, ni.rd.beta0) -
pgnorm(q = -1, delta.ni.skpt, ni.rd.alpha0, ni.rd.beta0)) +
dgnorm(y,         mu,            ni.alpha0,    ni.beta0, log = TRUE) -
log(pgnorm(q = 1, mu,            ni.alpha0,    ni.beta0) -
pgnorm(q = -x, mu,            ni.alpha0,    ni.beta0))
)
}
ni.post.nc[i, j] <- integrate_debug(ni.post.1, xmin = 0,  xmax = 1, ymin = 0, ymax = function(x) 1 - x) +
integrate_debug(ni.post.2, xmin = -1, xmax = 0, ymin = function(x) -x, ymax = 1)
}
}
# prior data conflict for skeptical prior
box.skpt <- sum(skpt.post.nc[skpt.post.nc <= skpt.post.nc[y1.IP + 1, y1.PC + 1]])
print(paste0("Sum marginal prob of data with enth prior (should be 1): ", sum(skpt.post.nc)))
print(paste0("Skeptical prior compatibility: ", box.skpt))
# prior data conflict for enthusiastic prior
box.enth <- sum(enth.post.nc[enth.post.nc <= enth.post.nc[y1.IP + 1, y1.PC + 1]])
print(paste0("Sum marginal prob of data with enth prior (should be 1): ", sum(enth.post.nc)))
print(paste0("Enthuastic prior compatibility: ", box.enth))
# prior data conflict for non-informative prior
box.ni <- sum(ni.post.nc[ni.post.nc <= ni.post.nc[y1.IP + 1, y1.PC + 1]])
print(paste0("Sum marginal prob of data with ni prior (should be 1): ", sum(ni.post.nc)))
print(paste0("Non-informative prior compatibility: ", box.ni))
# compute SKEPTICAL COMPONENT mixing weight
eff.mix.prob <- 1 - max(box.enth - box.skpt, 0)
return(cbind(eff.mix.prob, box.skpt, box.enth, box.ni))
}
i <- 1
prior_dat_conflict(Table0$y1.IP[i],
Table0$y0.IP[i],
Table0$y1.PC[i],
Table0$y0.PC[i])
library(pracma)
library(gnorm)
prior_dat_conflict(Table0$y1.IP[i],
Table0$y0.IP[i],
Table0$y1.PC[i],
Table0$y0.PC[i])
x <- prior_dat_conflict(Table0$y1.IP[i],Table0$y0.IP[i],Table0$y1.PC[i],Table0$y0.PC[i])
x
x <- foreach (i = 1:16, .combine='c') %dopar% {
prior_dat_conflict(Table0$y1.IP[i],
Table0$y0.IP[i],
Table0$y1.PC[i],
Table0$y0.PC[i])
}
library(foreach)
library(doParallel)
registerDoParallel(detectCores())
getDoParWorkers()
x <- foreach (i = 1:16, .combine='c') %dopar% {
prior_dat_conflict(Table0$y1.IP[i],
Table0$y0.IP[i],
Table0$y1.PC[i],
Table0$y0.PC[i])
}
x
x
matrix(data = x, ncol = 4)
x
matrix(data = x, nrow =16)
matrix(data = t(x), nrow =16)
matrix(data = t(x), nrow =4)
x.t <- t(matrix(data = t(x), nrow = 4))
x.t         <- df(t(matrix(data = t(x), nrow = 4)))
x.t         <- dt(matrix(data = t(x), nrow = 4))
x.t         <- t(matrix(data = t(x), nrow = 4))
x.t
names(x.t)  <- c(eff.mix.prob, box.skpt, box.enth, box.ni)
names(x.t)  <- c("eff.mix.prob", "box.skpt", "box.enth", "box.ni")
x.t
x
x.t         <- t(matrix(data = x, nrow = 4))
x.t
x.t         <- data.frame(t(matrix(data = x, nrow = 4)))
names(x.t)  <- c("eff.mix.prob", "box.skpt", "box.enth", "box.ni")
x.t
Table0 <- cbind(Table0, x.t)
nrow(Table0)
rm(list=ls())
library(pracma)
library(gnorm)
library(foreach)
library(doParallel)
registerDoParallel(detectCores())
getDoParWorkers()
############################################################################################################################################
############################################################################################################################################
############################################################################################################################################
setwd("/Users/kwiatkoe/Documents/GitHub/Bayesian-Sequential-Monitoring/00-paper/FIGURES/riskdiff/code/plots/")
load(file = '../args_model.RData') # loads all model information include prior parameters AND SETS SEED
# create data matrix
y1.IP        <- seq(0, 58)
y0.IP        <- 58 - y1.IP
Table0       <- data.frame(y1.IP, y0.IP)
Table0$y1.PC <- 16
Table0$y0.PC <- 26
prior_dat_conflict <- function(y1.IP, y0.IP, y1.PC, y0.PC){
skpt.post.nc       <- matrix(NA,
nrow = y1.IP + y0.IP + 1,
ncol = y1.PC + y0.PC + 1)
enth.post.nc       <- matrix(NA,
nrow = y1.IP + y0.IP + 1,
ncol = y1.PC + y0.PC + 1)
ni.post.nc         <- matrix(NA,
nrow = y1.IP + y0.IP + 1,
ncol = y1.PC + y0.PC + 1)
for (i in 1:(y1.IP + y0.IP + 1)){
for (j in 1:(y1.PC + y0.PC + 1)){
skpt.post.1   <- function(x, y){
exp(
dbinom(i-1,   y1.IP + y0.IP, x + y, log = TRUE) +
dbinom(j-1, y1.PC + y0.PC, y, log = TRUE) +
dgnorm(x,            delta.skpt, skpt.rd.alpha0, skpt.rd.beta0, log = TRUE) -
log(pgnorm(q = 1,    delta.skpt, skpt.rd.alpha0, skpt.rd.beta0) -
pgnorm(q = -1, delta.skpt, skpt.rd.alpha0, skpt.rd.beta0)) +
dgnorm(y,            mu, skpt.alpha0, skpt.beta0, log = TRUE) -
log(pgnorm(q = 1-x,  mu, skpt.alpha0, skpt.beta0) -
pgnorm(q = 0,  mu, skpt.alpha0, skpt.beta0))
)
}
skpt.post.2   <- function(x, y){
exp(
dbinom(i-1,   y1.IP + y0.IP, x + y, log = TRUE) +
dbinom(j-1, y1.PC + y0.PC, y, log = TRUE) +
dgnorm(x,            delta.skpt, skpt.rd.alpha0, skpt.rd.beta0, log = TRUE) -
log(pgnorm(q = 1,    delta.skpt, skpt.rd.alpha0, skpt.rd.beta0) -
pgnorm(q = -1, delta.skpt, skpt.rd.alpha0, skpt.rd.beta0)) +
dgnorm(y,            mu, skpt.alpha0, skpt.beta0, log = TRUE) -
log(pgnorm(q = 1,    mu, skpt.alpha0, skpt.beta0) -
pgnorm(q = -x, mu, skpt.alpha0, skpt.beta0))
)
}
skpt.post.nc[i, j] <- integrate_debug(skpt.post.1, xmin = 0,  xmax = 1, ymin = 0, ymax = function(x) 1 - x) +
integrate_debug(skpt.post.2, xmin = -1, xmax = 0, ymin = function(x) -x, ymax = 1)
enth.post.1   <- function(x, y){
exp(
dbinom(i-1,   y1.IP + y0.IP, x + y, log = TRUE) +
dbinom(j-1, y1.PC + y0.PC, y, log = TRUE) +
dgnorm(x,            delta.enth, enth.rd.alpha0, enth.rd.beta0, log = TRUE) -
log(pgnorm(q = 1,    delta.enth, enth.rd.alpha0, enth.rd.beta0) -
pgnorm(q = -1, delta.enth, enth.rd.alpha0, enth.rd.beta0)) +
dgnorm(y,            mu, enth.alpha0, enth.beta0, log = TRUE) -
log(pgnorm(q = 1-x,  mu, enth.alpha0, enth.beta0) -
pgnorm(q = 0,  mu, enth.alpha0, enth.beta0))
)
}
enth.post.2   <- function(x, y){
exp(
dbinom(i-1,   y1.IP + y0.IP, x + y, log = TRUE) +
dbinom(j-1, y1.PC + y0.PC, y, log = TRUE) +
dgnorm(x,            delta.enth, enth.rd.alpha0, enth.rd.beta0, log = TRUE) -
log(pgnorm(q = 1,    delta.enth, enth.rd.alpha0, enth.rd.beta0) -
pgnorm(q = -1, delta.enth, enth.rd.alpha0, enth.rd.beta0)) +
dgnorm(y,            mu, enth.alpha0, enth.beta0, log = TRUE) -
log(pgnorm(q = 1,    mu, enth.alpha0, enth.beta0) -
pgnorm(q = -x, mu, enth.alpha0, enth.beta0))
)
}
enth.post.nc[i, j] <- integrate_debug(enth.post.1, xmin = 0,  xmax = 1, ymin = 0, ymax = function(x) 1 - x) +
integrate_debug(enth.post.2, xmin = -1, xmax = 0, ymin = function(x) -x, ymax = 1)
ni.post.1 <- function(x, y){ # for x > 0 (theta > 0)
exp(
dbinom(i-1,   y1.IP + y0.IP, x + y, log = TRUE) +
dbinom(j-1, y1.PC + y0.PC, y, log = TRUE) +
dgnorm(x,            delta.ni.skpt, ni.rd.alpha0, ni.rd.beta0, log = TRUE) -
log(pgnorm(q = 1,  delta.ni.skpt, ni.rd.alpha0, ni.rd.beta0) -
pgnorm(q = -1,  delta.ni.skpt, ni.rd.alpha0, ni.rd.beta0)) +
dgnorm(y,          mu,            ni.alpha0,    ni.beta0, log = TRUE) -
log(pgnorm(q = 1-x,mu,            ni.alpha0,    ni.beta0) -
pgnorm(q = 0,   mu,            ni.alpha0,    ni.beta0))
)
}
ni.post.2 <- function(x, y){ # for x < 0 (theta < 0)
exp(
dbinom(i-1,   y1.IP + y0.IP, x + y, log = TRUE) +
dbinom(j-1, y1.PC + y0.PC, y, log = TRUE) +
dgnorm(x,           delta.ni.skpt, ni.rd.alpha0, ni.rd.beta0, log = TRUE) -
log(pgnorm(q = 1, delta.ni.skpt, ni.rd.alpha0, ni.rd.beta0) -
pgnorm(q = -1, delta.ni.skpt, ni.rd.alpha0, ni.rd.beta0)) +
dgnorm(y,         mu,            ni.alpha0,    ni.beta0, log = TRUE) -
log(pgnorm(q = 1, mu,            ni.alpha0,    ni.beta0) -
pgnorm(q = -x, mu,            ni.alpha0,    ni.beta0))
)
}
ni.post.nc[i, j] <- integrate_debug(ni.post.1, xmin = 0,  xmax = 1, ymin = 0, ymax = function(x) 1 - x) +
integrate_debug(ni.post.2, xmin = -1, xmax = 0, ymin = function(x) -x, ymax = 1)
}
}
# prior data conflict for skeptical prior
box.skpt <- sum(skpt.post.nc[skpt.post.nc <= skpt.post.nc[y1.IP + 1, y1.PC + 1]])
print(paste0("Sum marginal prob of data with enth prior (should be 1): ", sum(skpt.post.nc)))
print(paste0("Skeptical prior compatibility: ", box.skpt))
# prior data conflict for enthusiastic prior
box.enth <- sum(enth.post.nc[enth.post.nc <= enth.post.nc[y1.IP + 1, y1.PC + 1]])
print(paste0("Sum marginal prob of data with enth prior (should be 1): ", sum(enth.post.nc)))
print(paste0("Enthuastic prior compatibility: ", box.enth))
# prior data conflict for non-informative prior
box.ni <- sum(ni.post.nc[ni.post.nc <= ni.post.nc[y1.IP + 1, y1.PC + 1]])
print(paste0("Sum marginal prob of data with ni prior (should be 1): ", sum(ni.post.nc)))
print(paste0("Non-informative prior compatibility: ", box.ni))
# compute SKEPTICAL COMPONENT mixing weight
eff.mix.prob <- 1 - max(box.enth - box.skpt, 0)
return(cbind(eff.mix.prob, box.skpt, box.enth, box.ni))
}
start_time <- Sys.time()
x <- foreach (i = 1:nrow(Table0), .combine='c') %dopar% {
prior_dat_conflict(Table0$y1.IP[i],
Table0$y0.IP[i],
Table0$y1.PC[i],
Table0$y0.PC[i])
}
x.t         <- data.frame(t(matrix(data = x, nrow = 4)))
names(x.t)  <- c("eff.mix.prob", "box.skpt", "box.enth", "box.ni")
end_time  <- Sys.time()
diff_time <- difftime(end_time, start_time, units = "auto")
cat("Started  ", as.character(start_time), "\n",
"Finished ", as.character(end_time), "\n",
"Time difference of ", diff_time, " ", attr(diff_time, "units"), "\n",
sep = "")
Table0 <- cbind(Table0, x.t)
Table0$risk.diff <- y1.IP(y1.IP + y0.IP) - y1.PC(y1.PC - y0.PC)
Table0$risk.diff <- Table0$y1.IP(Table0$y1.IP + Table0$y0.IP) - Table0$y1.PC(Table0$y1.PC - Table0$y0.PC)
Table0 <- cbind(Table0, x.t)
Table0$risk.diff <- Table0$y1.IP/(Table0$y1.IP + Table0$y0.IP) - Table0$y1.PC/(Table0$y1.PC - Table0$y0.PC)
Table0
par(mfrow=c(1,2))
x <- c(Table0$risk.diff)
y <- c(Table0$box.skpt)
plot(x, y, xlab = "Observed Response Difference", ylab = "Box's p-value", pch = 19, cex = 0.25)
model <- lm(y ~ x + I(x^2) + I(x^3) + I(x^4) + I(x^5) + I(x^6) + I(x^7) + I(x^8) + I(x^9) + I(x^10))
myPredict <- predict( model )
ix <- sort(x,index.return=T)$ix
lines(x[ix], myPredict[ix], lwd=2 )
x <- c(Table0$risk.diff)
y <- c(Table0$box.skpt)
plot(x, y, xlab = "Observed Response Difference", ylab = "Box's p-value", pch = 19, cex = 0.25)
x <- c(Table0$risk.diff)
y <- c(Table0$box.skpt)
plot(x, y, xlab = "Observed Response Difference", ylab = "Box's p-value", pch = 19, cex = 0.25)
plot(x, y, xlab = "Observed Response Difference", ylab = "Box's p-value", pch = 19, cex = 0.25, type = 'l')
y <- c(Table0$box.enth)
points(x,y, col=2, pch = 19, cex = 0.25)
line(x,y, col=2, pch = 19, cex = 0.25)
line(x,y, col=2)
lines(x,y, col=2)
par(mfrow=c(1,2))
x <- c(Table0$risk.diff)
y <- c(Table0$box.skpt)
plot(x, y, xlab = "Observed Response Difference", ylab = "Box's p-value", pch = 19, cex = 0.25, type = 'l')
# model <- lm(y ~ x + I(x^2) + I(x^3) + I(x^4) + I(x^5) + I(x^6) + I(x^7) + I(x^8) + I(x^9) + I(x^10))
# myPredict <- predict( model )
# ix <- sort(x,index.return=T)$ix
# lines(x[ix], myPredict[ix], lwd=2 )
y <- c(Table0$box.enth)
lines(x,y, col=2)
points(x,y, col="blue")
lines(x,y, col="blue")
x <- c(Table0$risk.diff)
y <- c(Table0$box.skpt)
plot(x, y, xlab = "Observed Response Difference", ylab = "Box's p-value", pch = 19, cex = 0.25, type = 'l')
# model <- lm(y ~ x + I(x^2) + I(x^3) + I(x^4) + I(x^5) + I(x^6) + I(x^7) + I(x^8) + I(x^9) + I(x^10))
# myPredict <- predict( model )
# ix <- sort(x,index.return=T)$ix
# lines(x[ix], myPredict[ix], lwd=2 )
y <- c(Table0$box.enth)
lines(x,y, col=2)
# model <- lm(y ~ x + I(x^2) + I(x^3) + I(x^4) + I(x^5) + I(x^6) + I(x^7) + I(x^8) + I(x^9) + I(x^10))
# myPredict <- predict( model )
# ix <- sort(x,index.return=T)$ix
# lines(x[ix], myPredict[ix], col=2, lwd=2 )
y <- c(Table0$box.ni)
lines(x,y, col="blue")
# model <- lm(y ~ x + I(x^2) + I(x^3) + I(x^4))
# myPredict <- predict( model )
# ix <- sort(x,index.return=T)$ix
# lines(x[ix], myPredict[ix], col="blue", lwd=2 )
abline(v=0, col="grey")
abline(v=0.12, col="grey")
Table0$y1.IP/(Table0$y1.IP + Table0$y0.IP) - Table0$y1.PC/(Table0$y1.PC - Table0$y0.PC)
Table0$y1.IP/(Table0$y1.IP + Table0$y0.IP)
Table0$risk.diff <- Table0$y1.IP/(Table0$y1.IP + Table0$y0.IP) - Table0$y1.PC/(Table0$y1.PC + Table0$y0.PC)
par(mfrow=c(1,2))
x <- c(Table0$risk.diff)
y <- c(Table0$box.skpt)
plot(x, y, xlab = "Observed Response Difference", ylab = "Box's p-value", pch = 19, cex = 0.25, type = 'l')
y <- c(Table0$box.enth)
lines(x,y, col=2)
y <- c(Table0$box.ni)
lines(x,y, col="blue")
abline(v=0, col="grey")
abline(v=0.12, col="grey")
omega.skpt <- Table0$box.skpt.initial
omega.enth <- Table0$box.enth.initial
omega.ni   <- Table0$box.ni.initial
omega.ni   <- pmax(omega.ni-pmax(omega.skpt,omega.enth),0)
omega.sum  <- omega.skpt+omega.enth+omega.ni
omega.skpt <- omega.skpt/omega.sum
omega.enth <- omega.enth/omega.sum
omega.ni   <- omega.ni/omega.sum
x <- c(Table0$risk.diff.initial)
y <- omega.skpt
plot(x,y, pch = 19, cex = 0.25, ylim = c(0,1), xlab = "Observed Response Difference", ylab = "Mixture Weights")
x <- c(Table0$risk.diff)
y <- omega.skpt
plot(x,y, pch = 19, cex = 0.25, ylim = c(0,1), xlab = "Observed Response Difference", ylab = "Mixture Weights")
x
y
omega.skpt <- Table0$box.skpt.initial
omega.enth <- Table0$box.enth.initial
omega.ni   <- Table0$box.ni.initial
omega.skpt <- Table0$box.skpt
omega.enth <- Table0$box.enth
omega.ni   <- Table0$box.ni
omega.ni   <- pmax(omega.ni-pmax(omega.skpt,omega.enth),0)
omega.sum  <- omega.skpt+omega.enth+omega.ni
omega.skpt <- omega.skpt/omega.sum
omega.enth <- omega.enth/omega.sum
omega.ni   <- omega.ni/omega.sum
x <- c(Table0$risk.diff)
y <- omega.skpt
plot(x,y, pch = 19, cex = 0.25, ylim = c(0,1), xlab = "Observed Response Difference", ylab = "Mixture Weights")
plot(x,y, pch = 19, cex = 0.25, ylim = c(0,1), xlab = "Observed Response Difference", ylab = "Mixture Weights", type = 'l')
x <- c(Table0$risk.diff)
y <- omega.skpt
plot(x,y, pch = 19, cex = 0.25, ylim = c(0,1), xlab = "Observed Response Difference", ylab = "Mixture Weights", type = 'l')
y <- omega.enth
points(x,y, col=2, pch = 19, cex = 0.25)
y <- omega.ni
points(x,y, col="blue", pch = 19, cex = 0.25)
# model <- lm(y ~ x + I(x^2) + I(x^3) + I(x^4))
# model <- lm(y ~ x + I(x^2) + I(x^3) + I(x^4))
# myPredict <- predict( model )
# model <- lm(y ~ x + I(x^2) + I(x^3) + I(x^4))
# myPredict <- predict( model )
# ix <- sort(x,index.return=T)$ix
points(x,y, col=2, pch = 19, cex = 0.25, type = 'l')
points(x,y, col="blue", pch = 19, cex = 0.25, type = 'l')
plot(x,y, pch = 19, cex = 0.25, ylim = c(0,1), xlab = "Observed Response Difference", ylab = "Mixture Weights", type = 'l')
par(mfrow=c(1,2))
x <- c(Table0$risk.diff)
y <- c(Table0$box.skpt)
plot(x, y, xlab = "Observed Response Difference", ylab = "Box's p-value", pch = 19, cex = 0.25, type = 'l')
# model <- lm(y ~ x + I(x^2) + I(x^3) + I(x^4) + I(x^5) + I(x^6) + I(x^7) + I(x^8) + I(x^9) + I(x^10))
# myPredict <- predict( model )
# ix <- sort(x,index.return=T)$ix
# lines(x[ix], myPredict[ix], lwd=2 )
y <- c(Table0$box.enth)
lines(x,y, col=2)
# model <- lm(y ~ x + I(x^2) + I(x^3) + I(x^4) + I(x^5) + I(x^6) + I(x^7) + I(x^8) + I(x^9) + I(x^10))
# myPredict <- predict( model )
# ix <- sort(x,index.return=T)$ix
# lines(x[ix], myPredict[ix], col=2, lwd=2 )
y <- c(Table0$box.ni)
lines(x,y, col="blue")
# model <- lm(y ~ x + I(x^2) + I(x^3) + I(x^4))
# myPredict <- predict( model )
# ix <- sort(x,index.return=T)$ix
# lines(x[ix], myPredict[ix], col="blue", lwd=2 )
abline(v=0, col="grey")
abline(v=0.12, col="grey")
omega.skpt <- Table0$box.skpt
omega.enth <- Table0$box.enth
omega.ni   <- Table0$box.ni
omega.ni   <- pmax(omega.ni-pmax(omega.skpt,omega.enth),0)
omega.sum  <- omega.skpt+omega.enth+omega.ni
omega.skpt <- omega.skpt/omega.sum
omega.enth <- omega.enth/omega.sum
omega.ni   <- omega.ni/omega.sum
x <- c(Table0$risk.diff)
y <- omega.skpt
plot(x,y, pch = 19, cex = 0.25, ylim = c(0,1), xlab = "Observed Response Difference", ylab = "Mixture Weights", type = 'l')
# model <- lm(y ~ x + I(x^2) + I(x^3) + I(x^4))
# myPredict <- predict( model )
# ix <- sort(x,index.return=T)$ix
# lines(x[ix], myPredict[ix], lwd=2 )
y <- omega.enth
points(x,y, col=2, pch = 19, cex = 0.25, type = 'l')
# model <- lm(y ~ x + I(x^2) + I(x^3) + I(x^4))
# myPredict <- predict( model )
# ix <- sort(x,index.return=T)$ix
# lines(x[ix], myPredict[ix], lwd=2, col = 2)
y <- omega.ni
points(x,y, col="blue", pch = 19, cex = 0.25, type = 'l')
# model <- lm(y ~ x + I(x^2) + I(x^3) + I(x^4))
# myPredict <- predict( model )
# ix <- sort(x,index.return=T)$ix
# lines(x[ix], myPredict[ix], lwd=2, col = "blue")
## Used for 7/2/20 plot
# y1 <- c(Table0$box.skpt.initial,Table0$box.skpt.final)
# y2 <- c(Table0$box.enth.initial,Table0$box.enth.final)
# y  <- y2 - y1
# plot(x, y, xlab = "Observed Risk Difference", ylab = "Difference in Box's p-value")
# model <- lm(y ~ x + I(x^2) + I(x^3) + I(x^4) + I(x^5) + I(x^6) + I(x^7) + I(x^8) + I(x^9) + I(x^10))
# myPredict <- predict( model )
# ix <- sort(x,index.return=T)$ix
# lines(x[ix], myPredict[ix], lwd=2 )
# abline(v=0, col="grey")
# abline(v=0.12, col="grey")
# abline(h=0)
