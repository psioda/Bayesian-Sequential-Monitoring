sigma.sq<-alpha+beta
sigma.sq<-alpha+beta
1-pbetabinom(q=crit.val-y,size=max.ss-n,m=mu,s=sigma.sq)
# FDA examples
#find cutoff in the usual way
crit.val<-21
alpha.0<-alpha.skpt
beta.0<-beta.skpt
n<-4
y<-1
max.ss<-76
# https://en.wikipedia.org/wiki/Beta-binomial_distribution
# Further Bayesian considerations section
alpha<-alpha.0+y
beta<-beta.0+(n-y)
mu<-alpha/(alpha+beta)
sigma.sq<-alpha+beta
sigma.sq<-alpha+beta
1-pbetabinom(q=crit.val-y,size=max.ss-n,m=mu,s=sigma.sq)
install.packages("rmutil")
require(rmutil)
# presentation examples
alpha.0<-1
beta.0<-1
cutoff<-46
n<-c(20,50,75,90)
y<-c(12,28,41,49)
max.ss<-100
# https://en.wikipedia.org/wiki/Beta-binomial_distribution
# Further Bayesian considerations section
alpha<-alpha.0+y
beta<-beta.0+(n-y)
mu<-alpha/(alpha+beta)
sigma.sq<-alpha+beta
1-pbetabinom(q=cutoff,size=max.ss-n,m=mu,s=sigma.sq)
require(rmutil)
# presentation examples
alpha.0<-1
beta.0<-1
cutoff<-46
n<-c(20,50,75,90)
y<-c(12,28,41,49)
max.ss<-100
# https://en.wikipedia.org/wiki/Beta-binomial_distribution
# Further Bayesian considerations section
alpha<-alpha.0+y
beta<-beta.0+(n-y)
mu<-alpha/(alpha+beta)
sigma.sq<-alpha+beta
mu
sigma.sq
1-pbetabinom(q=cutoff,size=max.ss-n,m=mu,s=sigma.sq)
require(rmutil)
# presentation examples
alpha.0<-1
beta.0<-1
cutoff<-59
n<-c(20,50,75,90)
y<-c(12,28,41,49)
max.ss<-100
# https://en.wikipedia.org/wiki/Beta-binomial_distribution
# Further Bayesian considerations section
alpha<-alpha.0+y
beta<-beta.0+(n-y)
mu<-alpha/(alpha+beta)
sigma.sq<-alpha+beta
1-pbetabinom(q=cutoff-y-1,size=max.ss-n,m=mu,s=sigma.sq)
1-pbinom(q=cutoff,size=max.ss-n,mu) # for comparison
cutoff-y
cutoff-y-1
max.ss-n
require(rmutil)
# presentation examples
alpha.0<-1
beta.0<-1
cutoff<-59
n<-c(20,50,75,90)
y<-c(12,28,41,49)
max.ss<-100
# https://en.wikipedia.org/wiki/Beta-binomial_distribution
# Further Bayesian considerations section
alpha<-alpha.0+y
beta<-beta.0+(n-y)
mu<-alpha/(alpha+beta)
sigma.sq<-alpha+beta
1-pbetabinom(q=cutoff-y-1,size=max.ss-n,m=mu,s=sigma.sq)
# FDA examples
#find cutoff in the usual way
crit.val<-21
alpha.0<-alpha.skpt
beta.0<-beta.skpt
n<-c(0,8,16,24,32,40,48)
y<-c(0,3,4,5,7,8,8)
max.ss<-76
# https://en.wikipedia.org/wiki/Beta-binomial_distribution
# Further Bayesian considerations section
alpha<-alpha.0+y
beta<-beta.0+(n-y)
mu<-alpha/(alpha+beta)
sigma.sq<-alpha+beta
sigma.sq<-alpha+beta
1-pbetabinom(q=crit.val-y,size=max.ss-n,m=mu,s=sigma.sq)
1-pbinom(q=21,size=max.ss-n,mu) # for comparison
y1<-21
1-pbeta(0.2,y1+alpha.0,max.ss-y1+beta.0)
#1-pbinom(q=21,size=max.ss-n,mu) # for comparison
y1<-21
1-pbeta(0.2,y1+alpha.0,max.ss-y1+beta.0)
1-pbetabinom(q=crit.val-y-1,size=max.ss-n,m=mu,s=sigma.sq)
# FDA examples
#find cutoff in the usual way
max.ss<-76
1-pbeta(0.2,22+alpha.0,max.ss-y1+beta.0)
# FDA examples
#find cutoff in the usual way
max.ss<-76
alpha.0<-alpha.skpt
beta.0<-beta.skpt
1-pbeta(0.2,22+alpha.0,max.ss-y1+beta.0)
alpha.skpt
beta.skpt
alpha.skpt+beta.skpt
# FDA examples
#find cutoff in the usual way
max.ss<-76
alpha.0<-alpha.skpt
beta.0<-beta.skpt
1-pbeta(0.2,22+alpha.0,max.ss-y1+beta.0)
1-pbeta(0.2,22+alpha.0,max.ss-22+beta.0)
max.ss<-76
alpha.0<-alpha.skpt
beta.0<-beta.skpt
cutoff<-22
1-pbeta(0.2,cutoff+alpha.0,max.ss-cutoff+beta.0)
n<-c(0,8,16,24,32,40,48)
y<-c(0,3,4,5,7,8,8)
# https://en.wikipedia.org/wiki/Beta-binomial_distribution
# Further Bayesian considerations section
alpha<-alpha.0+y
beta<-beta.0+(n-y)
mu<-alpha/(alpha+beta)
sigma.sq<-alpha+beta
sigma.sq<-alpha+beta
1-pbetabinom(q=crit.val-y-1,size=max.ss-n,m=mu,s=sigma.sq)
n
y
n-y
crit.val
# FDA examples
#find cutoff in the usual way
max.ss<-76
alpha.0<-alpha.skpt
beta.0<-beta.skpt
cutoff<-22
1-pbeta(0.2,cutoff+alpha.0,max.ss-cutoff+beta.0)
n<-c(0,8,16,24,32,40,48)
y<-c(0,3,4,5,7,8,8)
# https://en.wikipedia.org/wiki/Beta-binomial_distribution
# Further Bayesian considerations section
alpha<-alpha.0+y
beta<-beta.0+(n-y)
mu<-alpha/(alpha+beta)
sigma.sq<-alpha+beta
1-pbetabinom(q=cutoff-y-1,size=max.ss-n,m=mu,s=sigma.sq)
# FDA examples
#find cutoff in the usual way
max.ss<-76
alpha.0<-alpha.skpt
beta.0<-beta.skpt
cutoff<-21
1-pbeta(0.2,cutoff+alpha.0,max.ss-cutoff+beta.0)
n<-c(0,8,16,24,32,40,48)
y<-c(0,3,4,5,7,8,8)
# https://en.wikipedia.org/wiki/Beta-binomial_distribution
# Further Bayesian considerations section
alpha<-alpha.0+y
beta<-beta.0+(n-y)
mu<-alpha/(alpha+beta)
sigma.sq<-alpha+beta
1-pbetabinom(q=cutoff-y-1,size=max.ss-n,m=mu,s=sigma.sq)
# FDA examples
#find cutoff in the usual way
max.ss<-76
alpha.0<-alpha.skpt
beta.0<-beta.skpt
cutoff<-23
1-pbeta(0.2,cutoff+alpha.0,max.ss-cutoff+beta.0)
n<-c(0,8,16,24,32,40,48)
y<-c(0,3,4,5,7,8,8)
# https://en.wikipedia.org/wiki/Beta-binomial_distribution
# Further Bayesian considerations section
alpha<-alpha.0+y
beta<-beta.0+(n-y)
mu<-alpha/(alpha+beta)
sigma.sq<-alpha+beta
1-pbetabinom(q=cutoff-y-1,size=max.ss-n,m=mu,s=sigma.sq)
es
#find cutoff in the usual way
max.ss<-76
alpha.0<-alpha.skpt
beta.0<-beta.skpt
cutoff<-22
1-pbeta(0.2,cutoff+alpha.0,max.ss-cutoff+beta.0)
n<-c(0,8,16,24,32,40,48)
y<-c(0,3,4,5,7,8,8)
# https://en.wikipedia.org/wiki/Beta-binomial_distribution
# Further Bayesian considerations section
alpha<-alpha.0+y
beta<-beta.0+(n-y)
mu<-alpha/(alpha+beta)
sigma.sq<-alpha+beta
1-pbetabinom(q=cutoff-y-1,size=max.ss-n,m=mu,s=sigma.sq)
# FDA examples
#find cutoff in the usual way
max.ss<-78
alpha.0<-alpha.skpt
beta.0<-beta.skpt
cutoff<-22
1-pbeta(0.2,cutoff+alpha.0,max.ss-cutoff+beta.0)
n<-c(0,8,16,24,32,40,48)
y<-c(0,3,4,5,7,8,8)
# https://en.wikipedia.org/wiki/Beta-binomial_distribution
# Further Bayesian considerations section
alpha<-alpha.0+y
beta<-beta.0+(n-y)
mu<-alpha/(alpha+beta)
sigma.sq<-alpha+beta
1-pbetabinom(q=cutoff-y-1,size=max.ss-n,m=mu,s=sigma.sq)
# FDA examples
#find cutoff in the usual way
max.ss<-76
alpha.0<-alpha.skpt
beta.0<-beta.skpt
cutoff<-22
1-pbeta(0.2,cutoff+alpha.0,max.ss-cutoff+beta.0)
n<-c(0,8,16,24,32,40,48)
y<-c(0,3,4,5,7,8,8)
# https://en.wikipedia.org/wiki/Beta-binomial_distribution
# Further Bayesian considerations section
alpha<-alpha.0+y
beta<-beta.0+(n-y)
mu<-alpha/(alpha+beta)
sigma.sq<-alpha+beta
1-pbetabinom(q=cutoff-y-1,size=max.ss-n,m=mu,s=sigma.sq)
rm(list = ls())
require(rmutil)
require(lattice)
require(pracma)
## Prior Parameters #######################################################
sigma<-8
alpha<-2
delta.enth<-0.1
delta.skpt<-0
delta.intr=(delta.skpt+delta.enth)/2
mu<-0.2
## Simulation Parameters ##################################################
sig.fut<-0.85
sig.eff<-0.95
cred.tail<-0.05
max.ss<-200
reps<-1000
p.range<-expand.grid(seq(0,0.5,by=0.1),seq(0,0.5,by=0.1))
names(p.range)<-c("IP","PC")
#p.range<-expand.grid(0.4,0.2) # (x=PC=Placebo Control, Y=IP=Investigational Product)
p.range<-p.range[(
(round(p.range$IP-p.range$PC+.1,1)==0) |
(round(p.range$IP-p.range$PC,1)==0)  |
(round(p.range$IP-p.range$PC-.1,1)==0)  |
(round(p.range$IP-p.range$PC-.2,1)==0) ),]
freq.mntr<-10
enr.shape<-1
out.mean<-4
## Posterior Mean Function ################################################
pm_mean<-function(index){}
## Efficacy/Futility Function #############################################
eff_fut<-function(index){
y1.IP<-sum(responses.IP[outcome.times.IP<=outcome.times.all[index]]==1)
y0.IP<-sum(responses.IP[outcome.times.IP<=outcome.times.all[index]]==0)
y1.PC<-sum(responses.PC[outcome.times.PC<=outcome.times.all[index]]==1)
y0.PC<-sum(responses.PC[outcome.times.PC<=outcome.times.all[index]]==0)
posterior.skpt<-function(x,y){
exp(y1.IP*log(y)+y0.IP*log(1-y))*
exp(y1.PC*log(x)+y0.PC*log(1-x))*
exp(-(sigma*(x-mu)^2)^alpha)*
exp(-((sigma*((y-x)-delta.skpt))^2)^alpha)
}
posterior.skpt.nc<-tryCatch(integral2(posterior.skpt,xmin=0,xmax=1,ymin=0,ymax=1,singular=T)[[1]],
error=function(e) integral2(posterior.skpt,xmin=0,xmax=1,ymin=0,ymax=1,abstol=1E-6)[[1]])
posterior.enth<-function(x,y){
exp(y1.IP*log(y)+y0.IP*log(1-y))*
exp(y1.PC*log(x)+y0.PC*log(1-x))*
exp(-(sigma*(x-mu)^2)^alpha)*
exp(-((sigma*((y-x)-delta.enth))^2)^alpha)
}
posterior.enth.nc<-tryCatch(integral2(posterior.enth,xmin=0,xmax=1,ymin=0,ymax=1,singular=T)[[1]],
error=function(e) integral2(posterior.enth,xmin=0,xmax=1,ymin=0,ymax=1,abstol=1E-6)[[1]])
efficacy<-tryCatch(
integral2(posterior.skpt,xmin=0,xmax=1-delta.skpt,
ymin=function(x) x+delta.skpt,ymax=1,singular=T)[[1]]/posterior.skpt.nc,
error=function(e)
integral2(posterior.skpt,xmin=0,xmax=1-delta.skpt,
ymin=function(x) x+delta.skpt,ymax=1,abstol=1E-6)[[1]]/posterior.skpt.nc)
futility<-tryCatch(
1-integral2(posterior.enth,xmin=0,xmax=1-delta.intr,
ymin=function(x) x+delta.intr,ymax=1,singular=T)[[1]]/posterior.enth.nc,
error=function(e)
1-integral2(posterior.enth,xmin=0,xmax=1-delta.intr,
ymin=function(x) x+delta.intr,ymax=1,abstol=1E-6)[[1]]/posterior.enth.nc)
return(cbind(efficacy,futility))
}
## Testing Priors #########################################################
prior.enth<-function(x,y){
#exp(-(sigma*(x-mu)^2)^alpha)*
exp(-((sigma*((y-x)-delta.enth))^2)^alpha)
}
x <- seq(0, 1, length= 100)
y <- x
z <- outer(x, y, prior.enth)
wireframe(z, drape=T, col.regions=rainbow(100))
prior.enth.nc<-tryCatch(integral2(prior.enth,xmin=0,xmax=1,ymin=0,ymax=1,singular=T)[[1]],
error=function(e) integral2(posterior.enth,xmin=0,xmax=1,ymin=0,ymax=1,abstol=1E-6)[[1]])
tail.enth<-tryCatch(
integral2(prior.enth,xmin=0,xmax=0.9,ymin=function(x) x+0.1,ymax=1,singular=T)[[1]]/prior.enth.nc,
error=function(e)
integral2(posterior.enth,xmin=0,xmax=0.9,ymin=function(x) x+0.1,ymax=1,singular=T)[[1]]/prior.enth.nc)
tail.enth
## SIMULATIONS ############################################################
matrix.names<-c("eff.mon.initial","eff.mon.final",
"fut.mon.initial","fut.mon.final",
"ss.initial","ss.final")
outer<- array(NA,dim =
c(length(freq.mntr),nrow(p.range),length(matrix.names)),
dimnames =
list(seq_len(length(freq.mntr)),
seq_len(nrow(p.range)),
matrix.names))
inner <- array(NA, dim=c(reps,length(matrix.names)),
dimnames = list(seq_len(reps),matrix.names))
for (i in 1:length(freq.mntr)){
for (j in 1:nrow(p.range)){
for (k in 1:reps){
if (k%%100==0){print(paste0("Freq ",i,", p.range",j,", Simulation ",k))}
enr.times.IP<-cumsum(rgamma(n=max.ss,shape=enr.shape[i],scale=0.5))
outcome.times.IP<-sort(enr.times.IP+rnorm(n=max.ss,mean=out.mean[i],sd=0.25))
responses.IP<-rbinom(n=max.ss,size=1,prob=p.range[j,1])
enr.times.PC<-cumsum(rgamma(n=max.ss,shape=enr.shape[i],scale=0.5))
outcome.times.PC<-sort(enr.times.PC+rnorm(n=max.ss,mean=out.mean[i],sd=0.25))
responses.PC<-rbinom(n=max.ss,size=1,prob=p.range[j,2])
outcome.times.all<-sort(c(outcome.times.IP,outcome.times.PC))
enr.times.all<-sort(c(enr.times.IP,enr.times.PC))
for (h in seq(freq.mntr,(2*max.ss),by=freq.mntr)){
result<-eff_fut(h)
futility<-result[2]
efficacy<-result[1]
if (futility>sig.fut | efficacy>sig.eff){
break
}
}
n.initial<-h
cutoff.time<-outcome.times.all[n.initial]
n.final<-sum(enr.times.all<=cutoff.time)
inner[k,paste0("fut.mon.","initial")]<-(futility>sig.fut)
inner[k,paste0("eff.mon.","initial")]<-(efficacy>sig.eff)
result<-eff_fut(n.final)
futility.final<-result[2]
efficacy.final<-result[1]
inner[k,paste0("fut.mon.","final")]<-(futility.final>sig.fut)
inner[k,paste0("eff.mon.","final")]<-(efficacy.final>sig.eff)
time<-c("initial","final")
n<-c(n.initial,n.final)
for (l in 1:2){
inner[k,paste0("ss.",time[l])]<-n[l]
}
}
outer[i,j,]<-apply(inner,MARGIN=2,FUN=mean)
}
}
cbind(p.range,outer[,,])
rm(list = ls())
require(rmutil)
require(lattice)
require(pracma)
## Prior Parameters #######################################################
sigma<-8
alpha<-2
delta.enth<-0.1
delta.skpt<-0
delta.intr=(delta.skpt+delta.enth)/2
mu<-0.2
## Simulation Parameters ##################################################
sig.fut<-0.85
sig.eff<-0.95
cred.tail<-0.05
max.ss<-200
reps<-1000
p.range<-expand.grid(seq(0,0.5,by=0.1),seq(0,0.5,by=0.1))
names(p.range)<-c("IP","PC")
#p.range<-expand.grid(0.4,0.2) # (x=PC=Placebo Control, Y=IP=Investigational Product)
p.range<-p.range[(
(round(p.range$IP-p.range$PC+.1,1)==0) |
(round(p.range$IP-p.range$PC,1)==0)  |
(round(p.range$IP-p.range$PC-.1,1)==0)  |
(round(p.range$IP-p.range$PC-.2,1)==0) ),]
freq.mntr<-10
enr.shape<-1
out.mean<-4
## Posterior Mean Function ################################################
pm_mean<-function(index){}
## Efficacy/Futility Function #############################################
eff_fut<-function(index){
y1.IP<-sum(responses.IP[outcome.times.IP<=outcome.times.all[index]]==1)
y0.IP<-sum(responses.IP[outcome.times.IP<=outcome.times.all[index]]==0)
y1.PC<-sum(responses.PC[outcome.times.PC<=outcome.times.all[index]]==1)
y0.PC<-sum(responses.PC[outcome.times.PC<=outcome.times.all[index]]==0)
posterior.skpt<-function(x,y){
exp(y1.IP*log(y)+y0.IP*log(1-y))*
exp(y1.PC*log(x)+y0.PC*log(1-x))*
exp(-(sigma*(x-mu)^2)^alpha)*
exp(-((sigma*((y-x)-delta.skpt))^2)^alpha)
}
posterior.skpt.nc<-tryCatch(integral2(posterior.skpt,xmin=0,xmax=1,ymin=0,ymax=1,singular=T)[[1]],
error=function(e) integral2(posterior.skpt,xmin=0,xmax=1,ymin=0,ymax=1,abstol=1E-6)[[1]])
posterior.enth<-function(x,y){
exp(y1.IP*log(y)+y0.IP*log(1-y))*
exp(y1.PC*log(x)+y0.PC*log(1-x))*
exp(-(sigma*(x-mu)^2)^alpha)*
exp(-((sigma*((y-x)-delta.enth))^2)^alpha)
}
posterior.enth.nc<-tryCatch(integral2(posterior.enth,xmin=0,xmax=1,ymin=0,ymax=1,singular=T)[[1]],
error=function(e) integral2(posterior.enth,xmin=0,xmax=1,ymin=0,ymax=1,abstol=1E-6)[[1]])
efficacy<-tryCatch(
integral2(posterior.skpt,xmin=0,xmax=1-delta.skpt,
ymin=function(x) x+delta.skpt,ymax=1,singular=T)[[1]]/posterior.skpt.nc,
error=function(e)
integral2(posterior.skpt,xmin=0,xmax=1-delta.skpt,
ymin=function(x) x+delta.skpt,ymax=1,abstol=1E-6)[[1]]/posterior.skpt.nc)
futility<-tryCatch(
1-integral2(posterior.enth,xmin=0,xmax=1-delta.intr,
ymin=function(x) x+delta.intr,ymax=1,singular=T)[[1]]/posterior.enth.nc,
error=function(e)
1-integral2(posterior.enth,xmin=0,xmax=1-delta.intr,
ymin=function(x) x+delta.intr,ymax=1,abstol=1E-6)[[1]]/posterior.enth.nc)
return(cbind(efficacy,futility))
}
## Testing Priors #########################################################
prior.enth<-function(x,y){
#exp(-(sigma*(x-mu)^2)^alpha)*
exp(-((sigma*((y-x)-delta.enth))^2)^alpha)
}
x <- seq(0, 1, length= 100)
y <- x
z <- outer(x, y, prior.enth)
wireframe(z, drape=T, col.regions=rainbow(100))
prior.enth.nc<-tryCatch(integral2(prior.enth,xmin=0,xmax=1,ymin=0,ymax=1,singular=T)[[1]],
error=function(e) integral2(posterior.enth,xmin=0,xmax=1,ymin=0,ymax=1,abstol=1E-6)[[1]])
tail.enth<-tryCatch(
integral2(prior.enth,xmin=0,xmax=0.9,ymin=function(x) x+0.1,ymax=1,singular=T)[[1]]/prior.enth.nc,
error=function(e)
integral2(posterior.enth,xmin=0,xmax=0.9,ymin=function(x) x+0.1,ymax=1,singular=T)[[1]]/prior.enth.nc)
tail.enth
## SIMULATIONS ############################################################
matrix.names<-c("eff.mon.initial","eff.mon.final",
"fut.mon.initial","fut.mon.final",
"ss.initial","ss.final")
outer<- array(NA,dim =
c(length(freq.mntr),nrow(p.range),length(matrix.names)),
dimnames =
list(seq_len(length(freq.mntr)),
seq_len(nrow(p.range)),
matrix.names))
inner <- array(NA, dim=c(reps,length(matrix.names)),
dimnames = list(seq_len(reps),matrix.names))
for (i in 1:length(freq.mntr)){
for (j in 1:nrow(p.range)){
for (k in 1:reps){
if (k%%100==0){print(paste0("Freq ",i,", p.range",j,", Simulation ",k))}
enr.times.IP<-cumsum(rgamma(n=max.ss,shape=enr.shape[i],scale=0.5))
outcome.times.IP<-sort(enr.times.IP+rnorm(n=max.ss,mean=out.mean[i],sd=0.25))
responses.IP<-rbinom(n=max.ss,size=1,prob=p.range[j,1])
enr.times.PC<-cumsum(rgamma(n=max.ss,shape=enr.shape[i],scale=0.5))
outcome.times.PC<-sort(enr.times.PC+rnorm(n=max.ss,mean=out.mean[i],sd=0.25))
responses.PC<-rbinom(n=max.ss,size=1,prob=p.range[j,2])
outcome.times.all<-sort(c(outcome.times.IP,outcome.times.PC))
enr.times.all<-sort(c(enr.times.IP,enr.times.PC))
for (h in seq(freq.mntr,(2*max.ss),by=freq.mntr)){
result<-eff_fut(h)
futility<-result[2]
efficacy<-result[1]
if (futility>sig.fut | efficacy>sig.eff){
break
}
}
n.initial<-h
cutoff.time<-outcome.times.all[n.initial]
n.final<-sum(enr.times.all<=cutoff.time)
inner[k,paste0("fut.mon.","initial")]<-(futility>sig.fut)
inner[k,paste0("eff.mon.","initial")]<-(efficacy>sig.eff)
result<-eff_fut(n.final)
futility.final<-result[2]
efficacy.final<-result[1]
inner[k,paste0("fut.mon.","final")]<-(futility.final>sig.fut)
inner[k,paste0("eff.mon.","final")]<-(efficacy.final>sig.eff)
time<-c("initial","final")
n<-c(n.initial,n.final)
for (l in 1:2){
inner[k,paste0("ss.",time[l])]<-n[l]
}
}
outer[i,j,]<-apply(inner,MARGIN=2,FUN=mean)
}
}
cbind(p.range,outer[,,])
