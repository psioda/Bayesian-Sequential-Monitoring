class = "data.frame",
row.names = c(NA, -3L))
dfm <- melt(df, variable.name = "month")
levels(dfm$month) <- month.abb
p <- ggplot(dfm, aes(month, value, group = City, colour = City))
(p1 <- p + geom_line(size = 1))
dgr_fmt <- function(x) {
parse(text = paste(x, "*degree", sep = ""))
}
none <- theme_void()
p2 <- p1 + scale_y_continuous(labels = dgr_fmt, limits = c(0, 100), expand = c(0, 0) ) +
ggtitle(expression("Average Monthly Temperatures (" * degree * "F)"))+
scale_color_discrete(guide = FALSE)+
xlab(NULL) + ylab(NULL)+
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
panel.border = element_blank(),
axis.line = element_line(colour = "grey50"))
(p3 <- p2 + geom_vline(xintercept = c(2.9,5.9, 8.9, 11.9), colour = "grey85", alpha = 0.5) +
geom_hline(yintercept = 32, colour = "grey80",alpha = 0.5) +
annotate("text", x = 1.2, y = 35, label = "Freezing", colour = "grey80", size = 4) +
annotate("text", x = c(1.5, 4.5, 7.5, 10.5), y = 97,
label = c("Winter","Spring", "Summer", "Autumn"), colour = "grey70", size = 4))
(p4 <- p3 + geom_text(data = dfm[dfm$month == "Dec", ], aes(label = City), hjust = 0.7, vjust = 1))
data_table <- ggplot(dfm, aes(x = month, y = factor(City), label = format(value, nsmall = 1), colour = City)) +
geom_text(size = 3.5) +
scale_color_discrete(guide = FALSE)+
scale_y_discrete(labels = abbreviate, limits = c("Minneapolis", "Raleigh", "Phoenix")) +
xlab(NULL) + ylab(NULL)+
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.border = element_blank(),
axis.text.x = element_blank(),
axis.ticks = element_blank(),
plot.margin = unit(c(-0.5, 1, 0, 0.5), "lines"))
Layout <- grid.layout(nrow = 2, ncol = 1, heights = unit(c(2, 0.25), c("null", "null")))
grid.show.layout(Layout)
vplayout <- function() {
grid.newpage()
pushViewport(viewport(layout = Layout))
}
subplot <- function(x, y) viewport(layout.pos.row = x,
layout.pos.col = y)
mmplot <- function(a, b) {
vplayout()
print(a, vp = subplot(1, 1))
print(b, vp = subplot(2, 1))
}
mmplot(p4, data_table)
library(ggplot2)
library(reshape2)
library(grid)
df <- structure(list(City = structure(c(2L,3L, 1L), .Label = c("Minneapolis", "Phoenix", "Raleigh"), class = "factor"),
January = c(52.1, 40.5, 12.2),
February = c(55.1, 42.2, 16.5),
March = c(59.7, 49.2, 28.3),
April = c(67.7, 59.5, 45.1),
May = c(76.3, 67.4, 57.1),
June = c(84.6, 74.4, 66.9),
July = c(91.2, 77.5, 71.9),
August = c(89.1, 76.5, 70.2),
September = c(83.8, 70.6, 60),
October = c(72.2, 60.2, 50),
November = c(59.8, 50, 32.4),
December = c(52.5, 41.2, 18.6)),
.Names = c("City", "January","February", "March", "April", "May", "June","July", "August",
"September", "October","November", "December"),
class = "data.frame",
row.names = c(NA, -3L))
dfm <- melt(df, variable.name = "month")
levels(dfm$month) <- month.abb
p <- ggplot(dfm, aes(month, value, group = City, colour = City))
(p1 <- p + geom_line(size = 1))
dgr_fmt <- function(x) {
parse(text = paste(x, "*degree", sep = ""))
}
none <- theme_void()
p2 <- p1 + scale_y_continuous(labels = dgr_fmt, limits = c(0, 100), expand = c(0, 0) ) +
ggtitle(expression("Average Monthly Temperatures (" * degree * "F)"))+
scale_color_discrete(guide = FALSE)+
xlab(NULL) + ylab(NULL)+
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
panel.border = element_blank(),
axis.line = element_line(colour = "grey50"))
(p3 <- p2 + geom_vline(xintercept = c(2.9,5.9, 8.9, 11.9), colour = "grey85", alpha = 0.5) +
geom_hline(yintercept = 32, colour = "grey80",alpha = 0.5) +
annotate("text", x = 1.2, y = 35, label = "Freezing", colour = "grey80", size = 4) +
annotate("text", x = c(1.5, 4.5, 7.5, 10.5), y = 97,
label = c("Winter","Spring", "Summer", "Autumn"), colour = "grey70", size = 4))
(p4 <- p3 + geom_text(data = dfm[dfm$month == "Dec", ], aes(label = City), hjust = 0.7, vjust = 1))
data_table <- ggplot(dfm, aes(x = month, y = factor(City), label = format(value, nsmall = 1), colour = City)) +
geom_text(size = 3.5) +
scale_color_discrete(guide = FALSE)+
scale_y_discrete(labels = abbreviate, limits = c("Minneapolis", "Raleigh", "Phoenix")) +
xlab(NULL) + ylab(NULL)+
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.border = element_blank(),
axis.text.x = element_blank(),
axis.ticks = element_blank(),
plot.margin = unit(c(-0.5, 1, 0, 0.5), "lines"))
Layout <- grid.layout(nrow = 2, ncol = 1, heights = unit(c(2, 0.25), c("null", "null")))
grid.show.layout(Layout)
vplayout <- function() {
grid.newpage()
pushViewport(viewport(layout = Layout))
}
subplot <- function(x, y) viewport(layout.pos.row = x,
layout.pos.col = y)
mmplot <- function(a, b) {
vplayout()
print(a, vp = subplot(1, 1))
print(b, vp = subplot(2, 1))
}
mmplot(p4, data_table)
# Look at data
head(dfm)
# First plot
p <- ggplot(dfm, aes(month, value, group = City, colour = City))
(p1 <- p + geom_line(size = 1))
dgr_fmt <- function(x) {
parse(text = paste(x, "*degree", sep = ""))
}
none <- theme_void()
p2 <- p1 + scale_y_continuous(labels = dgr_fmt, limits = c(0, 100), expand = c(0, 0) ) +
ggtitle(expression("Average Monthly Temperatures (" * degree * "F)"))+
scale_color_discrete(guide = FALSE)+
xlab(NULL) + ylab(NULL)+
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
panel.border = element_blank(),
axis.line = element_line(colour = "grey50"))
p2 <- p1 + scale_y_continuous(labels = dgr_fmt, limits = c(0, 100), expand = c(0, 0) ) +
ggtitle(expression("Average Monthly Temperatures (" * degree * "F)"))+
scale_color_discrete(guide = FALSE)+
xlab(NULL) + ylab(NULL)+
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
panel.border = element_blank(),
axis.line = element_line(colour = "grey50"))
p2
(p3 <- p2 + geom_vline(xintercept = c(2.9,5.9, 8.9, 11.9), colour = "grey85", alpha = 0.5) +
geom_hline(yintercept = 32, colour = "grey80",alpha = 0.5) +
annotate("text", x = 1.2, y = 35, label = "Freezing", colour = "grey80", size = 4) +
annotate("text", x = c(1.5, 4.5, 7.5, 10.5), y = 97,
label = c("Winter","Spring", "Summer", "Autumn"), colour = "grey70", size = 4))
(p4 <- p3 + geom_text(data = dfm[dfm$month == "Dec", ], aes(label = City), hjust = 0.7, vjust = 1))
data_table <- ggplot(dfm, aes(x = month, y = factor(City), label = format(value, nsmall = 1), colour = City)) +
geom_text(size = 3.5) +
scale_color_discrete(guide = FALSE)+
scale_y_discrete(labels = abbreviate, limits = c("Minneapolis", "Raleigh", "Phoenix")) +
xlab(NULL) + ylab(NULL)+
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.border = element_blank(),
axis.text.x = element_blank(),
axis.ticks = element_blank(),
plot.margin = unit(c(-0.5, 1, 0, 0.5), "lines"))
#Now the only step remaining is to set up the viewports and combine the two plots into one.
Layout <- grid.layout(nrow = 2, ncol = 1, heights = unit(c(2, 0.25), c("null", "null")))
grid.show.layout(Layout)
vplayout <- function() {
grid.newpage()
pushViewport(viewport(layout = Layout))
}
subplot <- function(x, y) viewport(layout.pos.row = x,
layout.pos.col = y)
mmplot <- function(a, b) {
vplayout()
print(a, vp = subplot(1, 1))
print(b, vp = subplot(2, 1))
}
mmplot(p4, data_table)
grid.newpage()
x <- stats::runif(20)
y <- stats::runif(20)
rot <- stats::runif(20, 0, 360)
grid.text("SOMETHING NICE AND BIG", x=x, y=y, rot=rot,
gp=gpar(fontsize=20, col="grey"))
grid.text("SOMETHING NICE AND BIG", x=x, y=y, rot=rot,
gp=gpar(fontsize=20), check=TRUE)
grid.newpage()
draw.text <- function(just, i, j) {
grid.text("ABCD", x=x[j], y=y[i], just=just)
grid.text(deparse(substitute(just)), x=x[j], y=y[i] + unit(2, "lines"),
gp=gpar(col="grey", fontsize=8))
}
x <- unit(1:4/5, "npc")
y <- unit(1:4/5, "npc")
grid.grill(h=y, v=x, gp=gpar(col="grey"))
draw.text(c("bottom"), 1, 1)
draw.text(c("left", "bottom"), 2, 1)
draw.text(c("right", "bottom"), 3, 1)
draw.text(c("centre", "bottom"), 4, 1)
draw.text(c("centre"), 1, 2)
draw.text(c("left", "centre"), 2, 2)
draw.text(c("right", "centre"), 3, 2)
draw.text(c("centre", "centre"), 4, 2)
draw.text(c("top"), 1, 3)
draw.text(c("left", "top"), 2, 3)
draw.text(c("right", "top"), 3, 3)
draw.text(c("centre", "top"), 4, 3)
draw.text(c(), 1, 4)
draw.text(c("left"), 2, 4)
draw.text(c("right"), 3, 4)
draw.text(c("centre"), 4, 4)
library(grid)
library(gridExtra)
# Function to extract legend
# https://stackoverflow.com/a/13650878/496488
g_legend <- function(a.gplot){
tmp <- ggplot_gtable(ggplot_build(a.gplot))
leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
legend <- tmp$grobs[[leg]]
return(legend)}
p = ggplot(data=md, aes(x=year, y=value, fill=variable) ) +
geom_bar(stat="identity")+
#theme(axis.text.x=element_text(angle=90, vjust=0.5, hjust=0.5))+
ggtitle("Score Distribution") +
labs(fill="")
# Extract the legend as a separate grob
leg = g_legend(p)
# Create a table grob
tab = t(df)
tab = tableGrob(tab, rows=NULL)
tab$widths <- unit(rep(1/ncol(tab), ncol(tab)), "npc")
# Lay out plot, legend, and table grob
grid.arrange(arrangeGrob(nullGrob(),
p + guides(fill=FALSE) +
theme(axis.text.x=element_blank(),
axis.title.x=element_blank(),
axis.ticks.x=element_blank()),
widths=c(1,8)),
arrangeGrob(arrangeGrob(nullGrob(),leg,heights=c(1,10)),
tab, nullGrob(), widths=c(6,20,1)),
heights=c(4,1))
library(grid)
library(gridExtra)
# Function to extract legend
# https://stackoverflow.com/a/13650878/496488
g_legend <- function(a.gplot){
tmp <- ggplot_gtable(ggplot_build(a.gplot))
leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
legend <- tmp$grobs[[leg]]
return(legend)}
p = ggplot(data=md, aes(x=year, y=value, fill=variable) ) +
geom_bar(stat="identity")+
#theme(axis.text.x=element_text(angle=90, vjust=0.5, hjust=0.5))+
ggtitle("Score Distribution") +
labs(fill="")
library(grid)
library(gridExtra)
df <- structure(list(year = 2002:2005, work = c(1L, 2L, 3L, 2L), confid = c(8L,
5L, 0L, 6L), jrs = c(0L, 3L, 4L, 5L)), .Names = c("year", "work",
"confid", "jrs"), class = "data.frame", row.names = c(NA, -4L
))
library(ggplot2)
library(reshape)
md <- melt(df, id=(c("year")))
temp.plot <- ggplot(data=md, aes(x=year, y=value, fill=variable) ) +
geom_bar(stat="identity")+
theme(axis.text.x=element_text(angle=90))+
ggtitle("Score Distribtion")
temp.plot
# Function to extract legend
# https://stackoverflow.com/a/13650878/496488
g_legend <- function(a.gplot){
tmp <- ggplot_gtable(ggplot_build(a.gplot))
leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
legend <- tmp$grobs[[leg]]
return(legend)}
p = ggplot(data=md, aes(x=year, y=value, fill=variable) ) +
geom_bar(stat="identity")+
#theme(axis.text.x=element_text(angle=90, vjust=0.5, hjust=0.5))+
ggtitle("Score Distribution") +
labs(fill="")
# Extract the legend as a separate grob
leg = g_legend(p)
# Create a table grob
tab = t(df)
tab = tableGrob(tab, rows=NULL)
tab$widths <- unit(rep(1/ncol(tab), ncol(tab)), "npc")
# Lay out plot, legend, and table grob
grid.arrange(arrangeGrob(nullGrob(),
p + guides(fill=FALSE) +
theme(axis.text.x=element_blank(),
axis.title.x=element_blank(),
axis.ticks.x=element_blank()),
widths=c(1,8)),
arrangeGrob(arrangeGrob(nullGrob(),leg,heights=c(1,10)),
tab, nullGrob(), widths=c(6,20,1)),
heights=c(4,1))
head(md)
summary(md)
library(grid)
library(gridExtra)
library(ggplot2)
library(reshape)
df <- structure(list(year = 2002:2005, work = c(1L, 2L, 3L, 2L), confid = c(8L,
5L, 0L, 6L), jrs = c(0L, 3L, 4L, 5L)), .Names = c("year", "work",
"confid", "jrs"), class = "data.frame", row.names = c(NA, -4L
))
md <- melt(df, id=(c("year")))
head(md)
summary(md)
library (ggplot2)
library(grid)
df=data.frame(y=c("cat1","cat2","cat3"),x=c(12,10,14),n=c(5,15,20))
p <- ggplot(df, aes(x,y)) + geom_point() +            # Base plot
theme(plot.margin = unit(c(1,3,1,1), "lines"))   # Make room for the grob
for (i in 1:length(df$n))  {
p <- p + annotation_custom(
grob = textGrob(label = df$n[i], hjust = 0, gp = gpar(cex = 1.5)),
ymin = df$y[i],      # Vertical position of the textGrob
ymax = df$y[i],
xmin = 14.3,         # Note: The grobs are positioned outside the plot area
xmax = 14.3)
}
# Code to override clipping
gt <- ggplot_gtable(ggplot_build(p))
gt$layout$clip[gt$layout$name == "panel"] <- "off"
grid.draw(gt)
library (ggplot2)
library(grid)
df=data.frame(y=c("cat1","cat2","cat3"),x=c(12,10,14),n=c(5,15,20))
p <- ggplot(df, aes(x,y)) + geom_point() +            # Base plot
theme(plot.margin = unit(c(1,3,1,1), "lines"))   # Make room for the grob
for (i in 1:length(df$n))  {
p <- p + annotation_custom(
grob = textGrob(label = df$n[i], hjust = 0, gp = gpar(cex = 1.5)),
ymin = df$y[i],      # Vertical position of the textGrob
ymax = df$y[i],
xmin = 14.3,         # Note: The grobs are positioned outside the plot area
xmax = 14.3)
}
library (ggplot2)
library(grid)
df=data.frame(y=c("cat1","cat2","cat3"),x=c(12,10,14),n=c(5,15,20))
p <- ggplot(df, aes(x,y)) + geom_point() +            # Base plot
theme(plot.margin = unit(c(1,3,1,1), "lines"))   # Make room for the grob
for (i in 1:length(df$n))  {
p <- p + annotation_custom(
grob = textGrob(label = df$n[i], hjust = 0, gp = gpar(cex = 1.5)),
ymin = df$y[i],      # Vertical position of the textGrob
ymax = df$y[i],
xmin = 14.3,         # Note: The grobs are positioned outside the plot area
xmax = 14.3)
}
# Code to override clipping
gt <- ggplot_gtable(ggplot_build(p))
gt$layout$clip[gt$layout$name == "panel"] <- "off"
grid.draw(gt)
library (ggplot2)
library(grid)
df=data.frame(y=c("cat1","cat2","cat3"),x=c(12,10,14),n=c(5,15,20))
p <- ggplot(df, aes(x,y)) + geom_point() +            # Base plot
theme(plot.margin = unit(c(1,3,1,1), "lines"))   # Make room for the grob
library (ggplot2)
library(grid)
df=data.frame(y=c("cat1","cat2","cat3"),x=c(12,10,14),n=c(5,15,20))
p <- ggplot(df, aes(x,y)) + geom_point() +            # Base plot
theme(plot.margin = unit(c(1,3,1,1), "lines"))   # Make room for the grob
rm(list = ls())
rm(list = ls())
rm(list = ls())
library (ggplot2)
library(grid)
df=data.frame(y=c("cat1","cat2","cat3"),x=c(12,10,14),n=c(5,15,20))
p <- ggplot(df, aes(x,y)) + geom_point() +            # Base plot
theme(plot.margin = unit(c(1,3,1,1), "lines"))   # Make room for the grob
p
i<-1
p <- p + annotation_custom(
grob = textGrob(label = df$n[i], hjust = 0, gp = gpar(cex = 1.5)),
ymin = df$y[i],      # Vertical position of the textGrob
ymax = df$y[i],
xmin = 14.3,         # Note: The grobs are positioned outside the plot area
xmax = 14.3)
length(df$n)
p
i<-2
p <- p + annotation_custom(
grob = textGrob(label = df$n[i], hjust = 0, gp = gpar(cex = 1.5)),
ymin = df$y[i],      # Vertical position of the textGrob
ymax = df$y[i],
xmin = 14.3,         # Note: The grobs are positioned outside the plot area
xmax = 14.3)
p
i<-3
p <- p + annotation_custom(
grob = textGrob(label = df$n[i], hjust = 0, gp = gpar(cex = 1.5)),
ymin = df$y[i],      # Vertical position of the textGrob
ymax = df$y[i],
xmin = 14.3,         # Note: The grobs are positioned outside the plot area
xmax = 14.3)
p
for (i in 1:length(df$n))  {
p <- p + annotation_custom(
grob = textGrob(label = df$n[i], hjust = 0, gp = gpar(cex = 1.5)),
ymin = df$y[i],      # Vertical position of the textGrob
ymax = df$y[i],
xmin = 14.3,         # Note: The grobs are positioned outside the plot area
xmax = 14.3)
}
# Code to override clipping
gt <- ggplot_gtable(ggplot_build(p))
gt$layout$clip[gt$layout$name == "panel"] <- "off"
grid.draw(gt)
rm(list = ls())
library (ggplot2)
library(grid)
df=data.frame(y=c("cat1","cat2","cat3"),x=c(12,10,14),n=c(5,15,20))
p <- ggplot(df, aes(x,y)) + geom_point() +            # Base plot
theme(plot.margin = unit(c(1,3,1,1), "lines"))   # Make room for the grob
p
i<-1
# Code to override clipping
gt <- ggplot_gtable(ggplot_build(p))
gt$layout$clip[gt$layout$name == "panel"] <- "off"
grid.draw(gt)
p <- p + annotation_custom(
grob = textGrob(label = df$n[i], hjust = 0, gp = gpar(cex = 1.5)),
ymin = df$y[i],      # Vertical position of the textGrob
ymax = df$y[i],
xmin = 14.3,         # Note: The grobs are positioned outside the plot area
xmax = 14.3)
p
rm(list = ls())
library (ggplot2)
library(grid)
df=data.frame(y=c("cat1","cat2","cat3"),x=c(12,10,14),n=c(5,15,20))
p <- ggplot(df, aes(x,y)) + geom_point() +            # Base plot
theme(plot.margin = unit(c(1,3,1,1), "lines"))   # Make room for the grob
p
i<-1
# Code to override clipping
gt <- ggplot_gtable(ggplot_build(p))
gt$layout$clip[gt$layout$name == "panel"] <- "off"
grid.draw(gt)
p <- p + annotation_custom(
grob = textGrob(label = df$n[i], hjust = 0, gp = gpar(cex = 1.5)),
ymin = df$y[i],      # Vertical position of the textGrob
ymax = df$y[i],
xmin = 14.3,         # Note: The grobs are positioned outside the plot area
xmax = 14.3)
p
for (i in 1:length(df$n))  {
p <- p + annotation_custom(
grob = textGrob(label = df$n[i], hjust = 0, gp = gpar(cex = 1.5)),
ymin = df$y[i],      # Vertical position of the textGrob
ymax = df$y[i],
xmin = 14.3,         # Note: The grobs are positioned outside the plot area
xmax = 14.3)
}
p
p
# Code to override clipping
gt <- ggplot_gtable(ggplot_build(p))
gt$layout$clip[gt$layout$name == "panel"] <- "off"
grid.draw(gt)
p
rm(list = ls())
library (ggplot2)
library(grid)
df=data.frame(y=c("cat1","cat2","cat3"),x=c(12,10,14),n=c(5,15,20))
p <- ggplot(df, aes(x,y)) + geom_point() +            # Base plot
theme(plot.margin = unit(c(1,3,1,1), "lines"))   # Make room for the grob
p
i<-1
p <- p + annotation_custom(
grob = textGrob(label = df$n[i], hjust = 0, gp = gpar(cex = 1.5)),
ymin = df$y[i],      # Vertical position of the textGrob
ymax = df$y[i],
xmin = 14.3,         # Note: The grobs are positioned outside the plot area
xmax = 14.3)
# Code to override clipping
gt <- ggplot_gtable(ggplot_build(p))
gt$layout$clip[gt$layout$name == "panel"] <- "off"
grid.draw(gt)
p
gt <- ggplot_gtable(ggplot_build(p))
gt$layout$clip[gt$layout$name == "panel"] <- "off"
grid.draw(gt)
p
rm(list = ls())
library (ggplot2)
library(grid)
df=data.frame(y=c("cat1","cat2","cat3"),x=c(12,10,14),n=c(5,15,20))
p <- ggplot(df, aes(x,y)) + geom_point() +            # Base plot
theme(plot.margin = unit(c(1,3,1,1), "lines"))   # Make room for the grob
p
i<-1
p <- p + annotation_custom(
grob = textGrob(label = df$n[i], hjust = 0, gp = gpar(cex = 1.5)),
ymin = df$y[i],      # Vertical position of the textGrob
ymax = df$y[i],
xmin = 14.3,         # Note: The grobs are positioned outside the plot area
xmax = 14.3)
# Code to override clipping
gt <- ggplot_gtable(ggplot_build(p))
gt$layout$clip[gt$layout$name == "panel"] <- "off"
grid.draw(gt)
df$y[i]
