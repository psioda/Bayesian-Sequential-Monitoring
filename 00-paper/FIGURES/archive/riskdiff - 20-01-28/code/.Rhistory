root<-"P:/Git/Bayesian-Sequential-Monitoring/00-paper/FIGURES/onearm/code"
setwd(root)
source("code_functions.R")
source("args_model.R")
width.scale<-7
prior.nc.skpt<-skpt_prior_default()
source("plots/plots_prior_skpt.R")
?mtext
mtext("A",side=2,line=3,adj=0)
mtext("A",side=2,line=3,adj=0)
?mtext
mtext("A",side=2,line=3,at=6,adj=0)
mtext("A",side=2,line=3,at=6,adj=1)
1
mtext("(A)",side=2,line=3,at=6,adj=1)
?mtext
mtext("(A)",side=2,line=3,at=6)
source("plots/plots_prior_skpt.R")
mtext("(A)",side=2,line=3,at=6,las=1)
mtext("(A)",side=2,line=2,at=6,las=1)
mtext("(A)",side=2,line=3,at=6,las=1)
#######################################
#### Figure 1, One Arm Prior Plots ####
#######################################
dev.off()
rm(list = ls())
root<-"P:/Git/Bayesian-Sequential-Monitoring/00-paper/FIGURES/onearm/code"
setwd(root)
source("code_functions.R")
source("args_model.R")
width.scale<-7
png('../../figure1a.png',width = 300*width.scale, height = 300*width.scale,pointsize=16,res=300)
prior.nc.skpt<-skpt_prior_default()
source("plots/plots_prior_skpt.R")
mtext("(A)",side=2,line=3,at=6,las=1)
dev.off()
#######################################
#### Figure 1, One Arm Prior Plots ####
#######################################
dev.off()
rm(list = ls())
root<-"P:/Git/Bayesian-Sequential-Monitoring/00-paper/FIGURES/onearm/code"
setwd(root)
source("code_functions.R")
source("args_model.R")
width.scale<-7
png('../../figure1a.png',width = 300*width.scale, height = 300*width.scale,pointsize=16,res=300)
prior.nc.skpt<-skpt_prior_default()
source("plots/plots_prior_skpt.R")
mtext("(A)",side=2,line=3,at=6,las=1)
dev.off()
rm(list = ls())
root<-"P:/Git/Bayesian-Sequential-Monitoring/00-paper/FIGURES/onearm/code"
setwd(root)
source("code_functions.R")
source("args_model.R")
width.scale<-7
png('../../figure1b.png',width = 300*width.scale, height = 300*width.scale,pointsize=16,res=300)
prior.nc.skpt<-skpt_prior_custom(scale=1.15)
source("plots/plots_prior_skpt.R")
mtext("(B)",side=2,line=3,at=6,las=1)
dev.off()
rm(list = ls())
root<-"P:/Git/Bayesian-Sequential-Monitoring/00-paper/FIGURES/onearm/code"
setwd(root)
source("code_functions.R")
source("args_model.R")
width.scale<-7
png('../../figure1c.png',width = 300*width.scale, height = 300*width.scale,pointsize=16,res=300)
prior.nc.enth<-enth_prior_default()
source("plots/plots_prior_enth.R")
mtext("(C)",side=2,line=3,at=6,las=1)
dev.off()
rm(list = ls())
root<-"P:/Git/Bayesian-Sequential-Monitoring/00-paper/FIGURES/onearm/code"
setwd(root)
source("code_functions.R")
source("args_model.R")
width.scale<-7
png('../../figure1d.png',width = 300*width.scale, height = 300*width.scale,pointsize=16,res=300)
prior.nc.enth<-enth_prior_custom(scale=0.85)
source("plots/plots_prior_enth.R")
mtext("(D)",side=2,line=3,at=6,las=1)
dev.off()
rm(list = ls())
root<-"P:/Git/Bayesian-Sequential-Monitoring/00-paper/FIGURES/onearm/code"
setwd(root)
source("code_functions.R")
source("args_model.R")
width.scale<-7
png('../../figure1b.png',width = 300*width.scale, height = 300*width.scale,pointsize=16,res=300)
prior.nc.skpt<-skpt_prior_custom(scale=1.15)
source("plots/plots_prior_skpt.R")
mtext("(B)",side=2,line=3,at=3,las=1)
dev.off()
rm(list = ls())
root<-"P:/Git/Bayesian-Sequential-Monitoring/00-paper/FIGURES/onearm/code"
setwd(root)
source("code_functions.R")
source("args_model.R")
width.scale<-7
png('../../figure1c.png',width = 300*width.scale, height = 300*width.scale,pointsize=16,res=300)
prior.nc.enth<-enth_prior_default()
source("plots/plots_prior_enth.R")
mtext("(C)",side=2,line=3,at=3,las=1)
dev.off()
#######################################
#### Figure 1, One Arm Prior Plots ####
#######################################
dev.off()
rm(list = ls())
root<-"P:/Git/Bayesian-Sequential-Monitoring/00-paper/FIGURES/onearm/code"
setwd(root)
source("code_functions.R")
source("args_model.R")
width.scale<-7
png('../../figure1a.png',width = 300*width.scale, height = 300*width.scale,pointsize=16,res=300)
prior.nc.skpt<-skpt_prior_default()
source("plots/plots_prior_skpt.R")
mtext("(A)",side=2,line=3,at=6,las=1)
dev.off()
rm(list = ls())
root<-"P:/Git/Bayesian-Sequential-Monitoring/00-paper/FIGURES/onearm/code"
setwd(root)
source("code_functions.R")
source("args_model.R")
width.scale<-7
png('../../figure1b.png',width = 300*width.scale, height = 300*width.scale,pointsize=16,res=300)
prior.nc.skpt<-skpt_prior_custom(scale=1.15)
source("plots/plots_prior_skpt.R")
mtext("(B)",side=2,line=3,at=6,las=1)
dev.off()
rm(list = ls())
root<-"P:/Git/Bayesian-Sequential-Monitoring/00-paper/FIGURES/onearm/code"
setwd(root)
source("code_functions.R")
source("args_model.R")
width.scale<-7
png('../../figure1c.png',width = 300*width.scale, height = 300*width.scale,pointsize=16,res=300)
prior.nc.enth<-enth_prior_default()
source("plots/plots_prior_enth.R")
mtext("(C)",side=2,line=3,at=3,las=1)
dev.off()
rm(list = ls())
root<-"P:/Git/Bayesian-Sequential-Monitoring/00-paper/FIGURES/onearm/code"
setwd(root)
source("code_functions.R")
source("args_model.R")
width.scale<-7
png('../../figure1d.png',width = 300*width.scale, height = 300*width.scale,pointsize=16,res=300)
prior.nc.enth<-enth_prior_custom(scale=0.85)
source("plots/plots_prior_enth.R")
mtext("(D)",side=2,line=3,at=3,las=1)
dev.off()
x<-grid1d
y<-grid1d
grid<-expand.grid(x=x,y=y)
grid$z<-prior.enth.nc(grid$x,grid$y)
dev.off()
width.scale<-10
png('../../figure5b.png',
width = 300*width.scale,
height = 300*width.scale,
pointsize=16,
res=300)
layout(matrix(c(2,2,4,
1,1,3,
1,1,3),
nrow=3,
byrow = TRUE),
widths=c(2,2,1),
heights=c(1,2,2))
#layout.show(n=4)
#par(mar=c(5.1, 4.1, 4.1, 2.1)) # c(bottom, left, top, right))
par(mar=c(2.1, 2.1, 0, 0)) # c(bottom, left, top, right))
plot(grid$x,grid$y,xlab="",ylab="",col="white")
cuts<-c(1E-11,1E-12,1E-10,1E-9,1E-8,1E-7,1E-6,1E-5,1E-4,1E-3,1E-2,1E-1,1,10,20,30)
colors<-gray.colors(length(cuts)-1, start = 1, end = 0)
for (i in 1:length(cuts)-1){
outer.xy <- grid[grid$z>cuts[i+1],c("x","y")]
inner.xy <- grid[grid$z>cuts[i],c("x","y")]
outer.x<-outer.xy[chull(outer.xy),"x"]
outer.y<-outer.xy[chull(outer.xy),"y"]
inner.x<-inner.xy[chull(inner.xy),"x"]
inner.y<-inner.xy[chull(inner.xy),"y"]
polygon(c(outer.x,outer.x[1],inner.x,inner.x[1]),
c(outer.y,outer.y[1],inner.y,inner.y[1]),
col=colors[i],
border = NA)
}
## FILL IN LAST SEGMENT
polygon(c(outer.x,outer.x[1]),
c(outer.y,outer.y[1]),
col=colors[i],
border = NA)
## Add lines
lines(c(0,1-delta.enth),c(delta.enth,1))
lines(c(0,1),c(0,1))
#par(mar=c(5.1, 4.1, 4.1, 2.1)/2)
#    oma=c(0,0,0,0)) # c(bottom, left, top, right))
legend('topleft',
legend= c(#as.expression(bquote(mu == .(p.enth))),
as.expression(bquote(alpha == .(sigma0.enth))),
as.expression(bquote(beta == .(lambda0.enth))),
as.expression(bquote(P(theta<.(delta.enth))==.(1-sig.eff)))))
plot(grid1d,
enth.x,
type='l',
xlab="",
ylab="",
main="",
xaxt="n")
axis(1,
at=c(mu),
labels=c(as.expression(bquote(mu))))
segments(x0=mu,y0=0,y1=enth.x[mu*(x.len-1)+1])
mtext("(A)",side=2,line=3,at=2,las=1)
plot(enth.y,
grid1d,
type='l',
xlab="",
ylab="",
main="",
yaxt="n")
axis(2,
at=c(mu),
labels=c(as.expression(bquote(mu))))
segments(y0=mu,x0=0,x1=enth.y[mu*(x.len-1)+1])
par(mar=c(0,0,0,0),
fig=c(0.55,1.05,0.1,0.15)*.75, # use scaling based on layout()
new=T) # fig syntax c(x1, x2, y1, y2)
image(x=matrix(seq_along(seq(1:length(cuts-1)))),
y=0,
#y=seq(1:length(cuts)-1),
#z=,
col=colors,
axes=FALSE)
axis(1,at=seq(0,1,length=(length(cuts-1))),
labels=seq(1,length=(length(cuts-1)),by=1),
ylim=c(0,0.1))
dev.off()
#########################################
#### Figure 5, Risk Diff Prior Plots ####
#########################################
rm(list = ls())
root<-"P:/Git/Bayesian-Sequential-Monitoring/00-paper/FIGURES/riskdiff/code"
setwd(root)
require(rmutil)
require(lattice)
require(pracma)
source("args_model.R")
source("code_functions.R")
fcn_prior_placebo()
skpt_tail_area()
enth_tail_area()
## SKEPTICAL PRIORS ##
prior.skpt<-function(x,y){
exp(-(abs(x-mu)/sigma0.placebo)^lambda0.placebo)*
exp(-(abs((y-x)-delta.skpt)/sigma0.skpt)^lambda0.skpt)}
nc.skpt<-tryCatch(integral2(prior.skpt,xmin=0,xmax=1,ymin=0,ymax=1,singular=T)[[1]],
error=function(e) integral2(prior.skpt,xmin=0,xmax=1,ymin=0,ymax=1,abstol=1E-6)[[1]])
prior.skpt.nc<-function(x,y){
exp(-(abs(x-mu)/sigma0.placebo)^lambda0.placebo)*
exp(-(abs((y-x)-delta.skpt)/sigma0.skpt)^lambda0.skpt)/nc.skpt}
## ENTHUASTIC PRIORS ##
prior.enth<-function(x,y){
exp(-(abs(x-mu)/sigma0.placebo)^lambda0.placebo)*
exp(-(abs((y-x)-delta.enth)/sigma0.enth)^lambda0.enth)}
nc.enth<-tryCatch(integral2(prior.enth,xmin=0,xmax=1,ymin=0,ymax=1,singular=T)[[1]],
error=function(e) integral2(prior.enth,xmin=0,xmax=1,ymin=0,ymax=1,abstol=1E-6)[[1]])
prior.enth.nc<-function(x,y){
exp(-(abs(x-mu)/sigma0.placebo)^lambda0.placebo)*
exp(-(abs((y-x)-delta.enth)/sigma0.enth)^lambda0.enth)/nc.enth}
x.len<-101
grid1d <- seq(0, 1, length= x.len)
skpt.x<-0
skpt.y<-0
enth.x<-0
enth.y<-0
for (i in 1:length(grid1d)){
## SKEPTICAL PRIORS ##
x<-grid1d[i]
marginal.x<-function(y){
exp(-(abs(x-mu)/sigma0.placebo)^lambda0.placebo)*
exp(-(abs((y-x)-delta.skpt)/sigma0.skpt)^lambda0.skpt)/nc.skpt}
skpt.x[i]<-integrate(marginal.x,lower=0,upper=1)[[1]]
y<-grid1d[i]
marginal.y<-function(x){
exp(-(abs(x-mu)/sigma0.placebo)^lambda0.placebo)*
exp(-(abs((y-x)-delta.skpt)/sigma0.skpt)^lambda0.skpt)/nc.skpt
}
skpt.y[i]<-integrate(marginal.y,lower=0,upper=1)[[1]]
## ENTHUASTIC PRIORS ##
x<-grid1d[i]
marginal.x<-function(y){
exp(-(abs(x-mu)/sigma0.placebo)^lambda0.placebo)*
exp(-(abs((y-x)-delta.enth)/sigma0.enth)^lambda0.enth)/nc.enth}
enth.x[i]<-integrate(marginal.x,lower=0,upper=1)[[1]]
y<-grid1d[i]
marginal.y<-function(x){
exp(-(abs(x-mu)/sigma0.placebo)^lambda0.placebo)*
exp(-(abs((y-x)-delta.enth)/sigma0.enth)^lambda0.enth)/nc.enth
}
enth.y[i]<-integrate(marginal.y,lower=0,upper=1)[[1]]
}
x<-grid1d
y<-grid1d
grid<-expand.grid(x=x,y=y)
grid$z<-prior.enth.nc(grid$x,grid$y)
dev.off()
width.scale<-10
png('../../figure5b.png',
width = 300*width.scale,
height = 300*width.scale,
pointsize=16,
res=300)
layout(matrix(c(2,2,4,
1,1,3,
1,1,3),
nrow=3,
byrow = TRUE),
widths=c(2,2,1),
heights=c(1,2,2))
#layout.show(n=4)
#par(mar=c(5.1, 4.1, 4.1, 2.1)) # c(bottom, left, top, right))
par(mar=c(2.1, 2.1, 0, 0)) # c(bottom, left, top, right))
plot(grid$x,grid$y,xlab="",ylab="",col="white")
cuts<-c(1E-11,1E-12,1E-10,1E-9,1E-8,1E-7,1E-6,1E-5,1E-4,1E-3,1E-2,1E-1,1,10,20,30)
colors<-gray.colors(length(cuts)-1, start = 1, end = 0)
for (i in 1:length(cuts)-1){
outer.xy <- grid[grid$z>cuts[i+1],c("x","y")]
inner.xy <- grid[grid$z>cuts[i],c("x","y")]
outer.x<-outer.xy[chull(outer.xy),"x"]
outer.y<-outer.xy[chull(outer.xy),"y"]
inner.x<-inner.xy[chull(inner.xy),"x"]
inner.y<-inner.xy[chull(inner.xy),"y"]
polygon(c(outer.x,outer.x[1],inner.x,inner.x[1]),
c(outer.y,outer.y[1],inner.y,inner.y[1]),
col=colors[i],
border = NA)
}
## FILL IN LAST SEGMENT
polygon(c(outer.x,outer.x[1]),
c(outer.y,outer.y[1]),
col=colors[i],
border = NA)
## Add lines
lines(c(0,1-delta.enth),c(delta.enth,1))
lines(c(0,1),c(0,1))
#par(mar=c(5.1, 4.1, 4.1, 2.1)/2)
#    oma=c(0,0,0,0)) # c(bottom, left, top, right))
legend('topleft',
legend= c(#as.expression(bquote(mu == .(p.enth))),
as.expression(bquote(alpha == .(sigma0.enth))),
as.expression(bquote(beta == .(lambda0.enth))),
as.expression(bquote(P(theta<.(delta.enth))==.(1-sig.eff)))))
plot(grid1d,
enth.x,
type='l',
xlab="",
ylab="",
main="",
xaxt="n")
axis(1,
at=c(mu),
labels=c(as.expression(bquote(mu))))
segments(x0=mu,y0=0,y1=enth.x[mu*(x.len-1)+1])
mtext("(A)",side=2,line=3,at=2,las=1)
plot(enth.y,
grid1d,
type='l',
xlab="",
ylab="",
main="",
yaxt="n")
axis(2,
at=c(mu),
labels=c(as.expression(bquote(mu))))
segments(y0=mu,x0=0,x1=enth.y[mu*(x.len-1)+1])
par(mar=c(0,0,0,0),
fig=c(0.55,1.05,0.1,0.15)*.75, # use scaling based on layout()
new=T) # fig syntax c(x1, x2, y1, y2)
image(x=matrix(seq_along(seq(1:length(cuts-1)))),
y=0,
#y=seq(1:length(cuts)-1),
#z=,
col=colors,
axes=FALSE)
axis(1,at=seq(0,1,length=(length(cuts-1))),
labels=seq(1,length=(length(cuts-1)),by=1),
ylim=c(0,0.1))
dev.off()
x<-grid1d
y<-grid1d
grid<-expand.grid(x=x,y=y)
grid$z<-prior.enth.nc(grid$x,grid$y)
dev.off()
width.scale<-10
png('../../figure5b.png',
width = 300*width.scale,
height = 300*width.scale,
pointsize=16,
res=300)
layout(matrix(c(2,2,4,
1,1,3,
1,1,3),
nrow=3,
byrow = TRUE),
widths=c(2,2,1),
heights=c(1,2,2))
#layout.show(n=4)
#par(mar=c(5.1, 4.1, 4.1, 2.1)) # c(bottom, left, top, right))
par(mar=c(2.1, 2.1, 0, 0)) # c(bottom, left, top, right))
plot(grid$x,grid$y,xlab="",ylab="",col="white")
cuts<-c(1E-11,1E-12,1E-10,1E-9,1E-8,1E-7,1E-6,1E-5,1E-4,1E-3,1E-2,1E-1,1,10,20,30)
colors<-gray.colors(length(cuts)-1, start = 1, end = 0)
for (i in 1:length(cuts)-1){
outer.xy <- grid[grid$z>cuts[i+1],c("x","y")]
inner.xy <- grid[grid$z>cuts[i],c("x","y")]
outer.x<-outer.xy[chull(outer.xy),"x"]
outer.y<-outer.xy[chull(outer.xy),"y"]
inner.x<-inner.xy[chull(inner.xy),"x"]
inner.y<-inner.xy[chull(inner.xy),"y"]
polygon(c(outer.x,outer.x[1],inner.x,inner.x[1]),
c(outer.y,outer.y[1],inner.y,inner.y[1]),
col=colors[i],
border = NA)
}
## FILL IN LAST SEGMENT
polygon(c(outer.x,outer.x[1]),
c(outer.y,outer.y[1]),
col=colors[i],
border = NA)
## Add lines
lines(c(0,1-delta.enth),c(delta.enth,1))
lines(c(0,1),c(0,1))
#par(mar=c(5.1, 4.1, 4.1, 2.1)/2)
#    oma=c(0,0,0,0)) # c(bottom, left, top, right))
legend('topleft',
legend= c(#as.expression(bquote(mu == .(p.enth))),
as.expression(bquote(alpha == .(sigma0.enth))),
as.expression(bquote(beta == .(lambda0.enth))),
as.expression(bquote(P(theta<.(delta.enth))==.(1-sig.eff)))))
plot(grid1d,
enth.x,
type='l',
xlab="",
ylab="",
main="",
xaxt="n")
axis(1,
at=c(mu),
labels=c(as.expression(bquote(mu))))
segments(x0=mu,y0=0,y1=enth.x[mu*(x.len-1)+1])
mtext("(A)",side=2,line=2,at=2,las=1)
plot(enth.y,
grid1d,
type='l',
xlab="",
ylab="",
main="",
yaxt="n")
axis(2,
at=c(mu),
labels=c(as.expression(bquote(mu))))
segments(y0=mu,x0=0,x1=enth.y[mu*(x.len-1)+1])
par(mar=c(0,0,0,0),
fig=c(0.55,1.05,0.1,0.15)*.75, # use scaling based on layout()
new=T) # fig syntax c(x1, x2, y1, y2)
image(x=matrix(seq_along(seq(1:length(cuts-1)))),
y=0,
#y=seq(1:length(cuts)-1),
#z=,
col=colors,
axes=FALSE)
axis(1,at=seq(0,1,length=(length(cuts-1))),
labels=seq(1,length=(length(cuts-1)),by=1),
ylim=c(0,0.1))
dev.off()
rm(list = ls())
source("figure5.R")
source("figure5a.R")
rm(list = ls())
getwd()
