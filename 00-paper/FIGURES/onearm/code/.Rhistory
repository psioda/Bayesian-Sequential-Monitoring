inner[i, "box.ni.initial"]       <- mon.result.initial$box.ni
inner[i, "eff.mix.prob.initial"] <- mon.result.final$eff.mix.prob
inner[i, "y1.IP.initial"]        <- mon.result.initial$y1.IP
inner[i, "y1.PC.initial"]        <- mon.result.initial$y1.PC
inner[i, "y0.IP.initial"]        <- mon.result.initial$y0.IP
inner[i, "y0.PC.initial"]        <- mon.result.initial$y0.PC
inner[i, "eff.prob.initial"]     <- mon.result.initial$eff.prob
inner[i, "fut.prob.initial"]     <- mon.result.initial$fut.prob
# Final
cutoff.time                      <- outcome.times.all[n.initial]
n.final                          <- sum(enr.times.all <= cutoff.time)
mon.result.final                 <- monitoring(index = n.final) # calls prior_data_conflict(), takes time
inner[i, "box.skpt.final"]       <- mon.result.final$box.skpt
inner[i, "box.enth.final"]       <- mon.result.final$box.enth
inner[i, "box.ni.final"]         <- mon.result.final$box.ni
inner[i, "eff.mix.prob.final"]   <- mon.result.final$eff.mix.prob
inner[i, "y1.IP.final"]          <- mon.result.final$y1.IP
inner[i, "y1.PC.final"]          <- mon.result.final$y1.PC
inner[i, "y0.IP.final"]          <- mon.result.final$y0.IP
inner[i, "y0.PC.final"]          <- mon.result.final$y0.PC
inner[i, "eff.prob.final"]       <- mon.result.final$eff.prob
inner[i, "fut.prob.final"]       <- mon.result.final$fut.prob
}
Table0     <- data.frame(t(inner))
Table0$idx <- idx
write.csv(Table0, file = paste0("../output/Table0/", idx, "Table0.csv"))
}
length(names)
?assign
inner[1,"box.skpt.initial"]
assign(inner[1, "box.skpt.initial"], 10)
vars[i]
inner[1, paste(vars[i], "initial", sep = "."] <- 10
inner[1, paste(vars[i], "initial", sep = ".")] <- 10
inner[1, paste(vars[i], "initial", sep = ".")]
mon.result.initial[vars[i]]
# Initial
for(i in 1:length(vars)){
inner[1, paste(vars[i], "initial", sep = ".")] <- mon.result.initial[vars[i]]
}
mon.result.initial[vars[i]]
dim(mon.result.initial[vars[i]])
inner[1, paste(vars[i], "initial", sep = ".")]
i
# Initial
for(k in 1:length(vars)){
inner[i, paste(vars[k], "initial", sep = ".")] <- mon.result.initial[vars[k]]
}
k
inner[i, paste(vars[k], "initial", sep = ".")]
paste(vars[k], "initial", sep = ".")
vars
names
inner[i, paste(vars[k], "initial", sep = ".")]
paste(vars[k], "initial", sep = ".")
inner[i, "y1.IP.initial"]
inner[i, "box.skpt.initial"]
inner
names(inner)
inner <- array(NA, dim = c(reps, length(names)), dimnames = list(seq_len(reps), names))
dimnames(inner)
inner[i, "box.skpt.initial"]
inner
i
# Initial
for(k in 1:length(vars)){
inner[i, paste(vars[k], "initial", sep = ".")] <- mon.result.initial[vars[k]]
}
inner[i, paste(vars[k], "initial", sep = ".")] <- mon.result.initial[vars[k]]
k
i
i <- 1
# Initial
for(k in 1:length(vars)){
inner[i, paste(vars[k], "initial", sep = ".")] <- mon.result.initial[vars[k]]
}
i
inner[i, paste(vars[k], "initial", sep = ".")]
k
vars[2]
vars[3]
vars[4]
inner[i, paste(vars[k], "initial", sep = ".")] <-
3
inner[i, paste(vars[k], "initial", sep = ".")]
inner[1, paste(vars[k], "initial", sep = ".")]
paste(vars[k], "initial", sep = ".")
inner[1, "y0.IP.initial"]
inner[1, c("y0.IP.initial")]
inner[1,1]
inner
inner <- array(NA, dim = c(reps, length(names)), dimnames = list(seq_len(reps), names))
inner
i
inner[1, "y0.IP.initial"]
# Initial
for(k in 1:length(vars)){
inner[i, paste(vars[k], "initial", sep = ".")] <- mon.result.initial[vars[k]]
}
inner
inner <- array(NA, dim = c(reps, length(names)), dimnames = list(seq_len(reps), names))
inner[i, "box.skpt.initial"]     <- mon.result.initial$box.skpt
inner[i, "box.enth.initial"]     <- mon.result.initial$box.enth
inner[i, "box.ni.initial"]       <- mon.result.initial$box.ni
inner[i, "eff.mix.prob.initial"] <- mon.result.final$eff.mix.prob
inner[i, "y1.IP.initial"]        <- mon.result.initial$y1.IP
inner[i, "y1.PC.initial"]        <- mon.result.initial$y1.PC
inner[i, "y0.IP.initial"]        <- mon.result.initial$y0.IP
inner[i, "y0.PC.initial"]        <- mon.result.initial$y0.PC
inner[i, "eff.prob.initial"]     <- mon.result.initial$eff.prob
inner[i, "fut.prob.initial"]     <- mon.result.initial$fut.prob
inner
paste(vars[k], "initial", sep = ".")
i
inner[i, "box.skpt.initial"]
inner[i, paste(vars[k], "initial", sep = ".")]
mon.result.initial[vars[k]]
mon.result.initial[vars[k]]
[mon.result.initial[vars[k]]]
mon.result.initial[vars[k]][1]
mon.result.initial[vars[k]][[1]]
inner[i, paste(vars[k], "initial", sep = ".")] <- mon.result.initial[vars[k]][[1]]
# Initial
for(k in 1:length(vars)){
inner[i, paste(vars[k], "initial", sep = ".")] <- mon.result.initial[vars[k]][[1]]
}
mon.result.initial[vars[k]]
as.numeric(mon.result.initial[vars[k]])
# Initial
for(k in 1:length(vars)){
inner[i, paste(vars[k], "initial", sep = ".")] <- as.numeric(mon.result.initial[vars[k]])
}
inner
##################################
### Risk difference simulations
### Evan Kwiatkowski, Feb 2020
###
### # If changes made to functions then re-run args_model.R
### # If changes made to functions then re-run args_model.R
### # If changes made to functions then re-run args_model.R
### # If changes made to functions then re-run args_model.R
### # If changes made to functions then re-run args_model.R
### # If changes made to functions then re-run args_model.R
### # If changes made to functions then re-run args_model.R
### # If changes made to functions then re-run args_model.R
### # If changes made to functions then re-run args_model.R
### # If changes made to functions then re-run args_model.R
##################################
for (idx in 1:5){ # check here
if (Sys.getenv("USER") == "kwiatkoe") {
library(pracma)
library(gnorm)
} else {                                    # longleaf
library(pracma, lib.loc = "../rpkgs/")
library(gnorm,  lib.loc = "../rpkgs/")
args <- commandArgs(trailingOnly = TRUE)  # sequence from batch file
idx  <- as.numeric(args[1]);
}
# Model information, including all functions used (The only additional source file to be called is "code_enrollment.R")
load(file = 'args_model.RData') # loads all model information include prior parameters AND SETS SEED
set.seed(idx*623202)  #  05-19-2020
# Simulation information
simulation <- read.csv(file = "args_simulation.csv", header = TRUE, sep = ",")
for(i in 1:ncol(simulation)){
assign(names(simulation)[i], simulation[idx, names(simulation)[i]])
}
# Simulations ---
vars  <- c("y1.IP", "y0.IP", "y1.PC", "y0.PC", "eff.prob", "fut.prob", "eff.mix.prob", "box.skpt", "box.enth", "box.ni")
names <- c(paste(vars, "initial", sep="."), paste(vars, "final",   sep="."))
inner <- array(NA, dim = c(reps, length(names)), dimnames = list(seq_len(reps), names))
for (i in 1:reps){
{print(paste0("IDX ", idx, ", Simulation ", i))}
source("04_code_enrollment.R")
for (j in unique(c(seq(min.ss, max.ss, by = freq.mntr), max.ss))){
#for(j in max.ss){
#{print(paste0("Inner loop: ", j))}
n.initial          <- j
mon.result.initial <- monitoring(index = j)
futility           <- mon.result.initial$fut.prob
efficacy           <- mon.result.initial$eff.prob
if (futility > sig.fut | efficacy > sig.eff){
break
}
}
# Initial
for(k in 1:length(vars)){ inner[i, paste(vars[k], "initial", sep = ".")] <- as.numeric(mon.result.initial[vars[k]]) }
# Final
cutoff.time                      <- outcome.times.all[n.initial]
n.final                          <- sum(enr.times.all <= cutoff.time)
mon.result.final                 <- monitoring(index = n.final) # calls prior_data_conflict(), takes time
for(k in 1:length(vars)){ inner[i, paste(vars[k], "final", sep = ".")] <- as.numeric(mon.result.final[vars[k]]) }
}
Table0     <- data.frame(t(inner))
Table0$idx <- idx
write.csv(Table0, file = paste0("../output/Table0/", idx, "Table0.csv"))
}
##################################
# Model parameters
# Evan Kwiatkowski, Jun 22, 2020
##################################
read.tcsv = function(file, header=TRUE, sep=",", ...) {
n = max(count.fields(file, sep=sep), na.rm=TRUE)
x = readLines(file)
.splitvar = function(x, sep, n) {
var = unlist(strsplit(x, split=sep))
length(var) = n
return(var)
}
x = do.call(cbind, lapply(x, .splitvar, sep=sep, n=n))
x = apply(x, 1, paste, collapse=sep)
out = read.csv(text=x, sep=sep, header=header, ...)
return(out)
}
file_list <- list.files(paste0("../output/Table0"))
for (i in 1:length(file_list)){
temp <- read.tcsv(paste0("../output/Table0/", file_list[i]), header = TRUE)
temp$idx <- temp[nrow(temp),2]
temp <- temp[1:(nrow(temp)-1),]
if (i==1) {
final <- temp
} else {
final <- rbind(final,temp)
}
}
args_simulation <- read.csv(file = "args_simulation.csv", header = TRUE, sep = ",")
final           <- final[,-1]
combined        <- merge(args_simulation, final, by.x = "X", by.y = "idx")
write.csv(combined, file = "Table0_merged.csv") # will be used to bring back from longleaf
#####################################
# Simulation parameters
# Evan Kwiatkowski, Feb 23, 2020
#
# The (fut|eff).mix.prob weights are
# assigned to the SKEPTICAL component
#####################################
rm(list = ls())
simulation1 <- expand.grid(
seq(.39, 0.63, length = 5), # p.IP
.39, # p.PC
2,   # freq.mntr
1,   # enr.shape
4,   # out.mean
0,   # fut.mix.prob
rep(c(seq(1, 0.25, by = -0.25)), 2), # eff.mix.prob
0.5,  # inf.mix.prob
0.05, # cred.tail
100,  # max.ss
70,   # min.ss
10000)   # reps
simulation2 <- expand.grid(
seq(.39, 0.63, length = 5), # p.IP
.39, # p.PC
2,   # freq.mntr
1,   # enr.shape
4,   # out.mean
0,   # fut.mix.prob
rep(10,156), # eff.mix.prob
0.5,  # inf.mix.prob
0.05, # cred.tail
100,  # max.ss
70,   # min.ss
65)   # reps
simulation2 <- expand.grid(
seq(.39, 0.63, length = 5), # p.IP
.39, # p.PC
2,   # freq.mntr
1,   # enr.shape
4,   # out.mean
0,   # fut.mix.prob
rep(10,152), # eff.mix.prob
0.5,  # inf.mix.prob
0.05, # cred.tail
100,  # max.ss
70,   # min.ss
65)   # reps
simulation <- rbind(simulation1, simulation2)
20000/152
#####################################
# Simulation parameters
# Evan Kwiatkowski, Feb 23, 2020
#
# The (fut|eff).mix.prob weights are
# assigned to the SKEPTICAL component
#####################################
rm(list = ls())
simulation1 <- expand.grid(
seq(.39, 0.63, length = 5), # p.IP
.39, # p.PC
2,   # freq.mntr
1,   # enr.shape
4,   # out.mean
0,   # fut.mix.prob
rep(c(seq(1, 0.25, by = -0.25)), 2), # eff.mix.prob
0.5,  # inf.mix.prob
0.05, # cred.tail
100,  # max.ss
70,   # min.ss
10000)   # reps
simulation2 <- expand.grid(
seq(.39, 0.63, length = 5), # p.IP
.39, # p.PC
2,   # freq.mntr
1,   # enr.shape
4,   # out.mean
0,   # fut.mix.prob
rep(10,152), # eff.mix.prob
0.5,  # inf.mix.prob
0.05, # cred.tail
100,  # max.ss
70,   # min.ss
132)   # reps
simulation <- rbind(simulation1, simulation2)
summary(simulation)
#####################################
# Simulation parameters
# Evan Kwiatkowski, Feb 23, 2020
#
# The (fut|eff).mix.prob weights are
# assigned to the SKEPTICAL component
#####################################
rm(list = ls())
simulation1 <- expand.grid(
seq(.39, 0.63, length = 5), # p.IP
.39, # p.PC
2,   # freq.mntr
1,   # enr.shape
4,   # out.mean
0,   # fut.mix.prob
rep(c(seq(1, 0.25, by = -0.25)), 2), # eff.mix.prob
0.5,  # inf.mix.prob
0.05, # cred.tail
100,  # max.ss
70,   # min.ss
10000)   # reps
simulation2 <- expand.grid(
seq(.39, 0.63, length = 5), # p.IP
.39, # p.PC
2,   # freq.mntr
1,   # enr.shape
4,   # out.mean
0,   # fut.mix.prob
rep(10,152), # eff.mix.prob
0.5,  # inf.mix.prob
0.05, # cred.tail
100,  # max.ss
70,   # min.ss
132)   # reps
simulation <- rbind(simulation1, simulation2)
names(simulation) <- c(
"p.IP",
"p.PC",
"freq.mntr",
"enr.shape",
"out.mean",
"fut.mix.prob",
"eff.mix.prob",
"inf.mix.prob",
"cred.tail",
"max.ss",
"min.ss",
"reps")
write.csv(x    = simulation, file = "args_simulation.csv")
##################################
# Model parameters
# Evan Kwiatkowski, Feb 23, 2020
##################################
rm(list = ls())
if (Sys.getenv("USER") == "kwiatkoe") {
library(pracma)
library(gnorm)
setwd("/Users/kwiatkoe/Documents/GitHub/Bayesian-Sequential-Monitoring/00-paper/FIGURES/riskdiff/code")
}
if (.Platform$OS.type == "unix")    {
library(pracma, lib.loc = "../rpkgs/")
library(gnorm,  lib.loc = "../rpkgs/")
}
delta.enth <- 0.12
delta.skpt <- 0
delta.intr <- (delta.skpt+delta.enth)/2
mu         <- 0.39
sig.fut    <- 0.975
sig.eff    <- 0.975
source("03_code_integrate.R")
source("06_code_functions.R") # contains nested source("code_posteriors.R", local = TRUE)
source("priors/03_enth_joint.R")
enth_joint()
source("priors/06_skpt_joint.R")
skpt_joint()
delta.ni.enth <- 0.36
delta.ni.skpt <- 0.06
delta.ni.intr <- (delta.ni.skpt+delta.ni.enth)/2
source("priors/09_ni_joint.R")
ni_joint()
save.image(file = 'args_model.RData')
##################################
# Model parameters
# Evan Kwiatkowski, Feb 23, 2020
##################################
rm(list = ls())
if (Sys.getenv("USER") == "kwiatkoe") {
library(pracma)
library(gnorm)
setwd("/Users/kwiatkoe/Documents/GitHub/Bayesian-Sequential-Monitoring/00-paper/FIGURES/riskdiff/code")
}
if (.Platform$OS.type == "unix")    {
library(pracma, lib.loc = "../rpkgs/")
library(gnorm,  lib.loc = "../rpkgs/")
}
delta.enth <- 0.12
delta.skpt <- 0
delta.intr <- (delta.skpt+delta.enth)/2
mu         <- 0.39
sig.fut    <- 0.975
sig.eff    <- 0.975
source("03_code_integrate.R")
source("06_code_functions.R") # contains nested source("code_posteriors.R", local = TRUE)
source("priors/03_enth_joint.R")
enth_joint()
source("priors/06_skpt_joint.R")
skpt_joint()
delta.ni.enth <- 0.36
delta.ni.skpt <- 0.06
delta.ni.intr <- (delta.ni.skpt+delta.ni.enth)/2
source("priors/09_ni_joint.R")
ni_joint()
save.image(file = 'args_model.RData')
# assemble final prior
ni.prior.1 <- function(x, y){ # for x > 0 (theta > 0)
dgnorm(x,            delta.ni.skpt, ni.rd.alpha0, ni.rd.beta0)/
(pgnorm(q = 1,     delta.ni.skpt, ni.rd.alpha0, ni.rd.beta0) -
pgnorm(q = -1,  delta.ni.skpt, ni.rd.alpha0, ni.rd.beta0))*
dgnorm(y,          mu,         ni.alpha0,    ni.beta0)/
(pgnorm(q = 1 - x, mu,         ni.alpha0,    ni.beta0) -
pgnorm(q = 0,   mu,         ni.alpha0,    ni.beta0))
}
ni.prior.2 <- function(x, y){ # for x < 0 (theta < 0)
dgnorm(x,           delta.ni.skpt, ni.rd.alpha0, ni.rd.beta0)/
(pgnorm(q = 1,    delta.ni.skpt, ni.rd.alpha0, ni.rd.beta0) -
pgnorm(q = -1, delta.ni.skpt, ni.rd.alpha0, ni.rd.beta0))*
dgnorm(y,         mu,         ni.alpha0,    ni.beta0)/
(pgnorm(q = 1,    mu,         ni.alpha0,    ni.beta0) -
pgnorm(q = -x, mu,         ni.alpha0,    ni.beta0))
}
x.len <- 101
y.len <- 101
x <- seq(-1, 1, length = x.len)
y <- seq(0,  1, length = y.len)
grid <- expand.grid(x = x, y = y)
grid.ni <- grid
for (i in 1:nrow(grid)){
if (grid.ni$x[i] >= 0 && (grid.ni$x[i] < (1 - grid.ni$y[i]))) {
grid.ni$z[i] <- ni.prior.1(grid.ni$x[i], grid.ni$y[i])
} else if (grid.ni$x[i] <= 0 && (grid.ni$x[i] > -grid.ni$y[i])) {
grid.ni$z[i] <- ni.prior.2(grid.ni$x[i], grid.ni$y[i])
} else {
grid.ni$z[i] <- 0
}
}
par(mar=c(5.1, 4.1, 4.1, 2.1)) # c(bottom, left, top, right))
plot(grid.ni$x,grid.ni$y,
xlab="",
ylab="",
col="white",
xaxt='n',
yaxt='n')
title(ylab=as.expression(bquote("Response Probability")), line = 3)
title(xlab=as.expression(bquote("Risk Difference")), line = 3)
cuts<-c(0,1E-11,1E-12,1E-10,1E-9,1E-8,1E-7,1E-6,1E-5,1E-4,1E-3,1E-2,1E-1,1,10,20,30)
colors<-gray.colors(length(cuts)-1, start = 0.9, end = 0)
for (i in 1:length(cuts)-1){
outer.xy <- grid.ni[grid.ni$z>cuts[i+1],c("x","y")]
inner.xy <- grid.ni[grid.ni$z>cuts[i],c("x","y")]
outer.x<-outer.xy[chull(outer.xy),"x"]
outer.y<-outer.xy[chull(outer.xy),"y"]
inner.x<-inner.xy[chull(inner.xy),"x"]
inner.y<-inner.xy[chull(inner.xy),"y"]
polygon(c(outer.x,outer.x[1],inner.x,inner.x[1]),
c(outer.y,outer.y[1],inner.y,inner.y[1]),
col=colors[i],
border = NA)
}
axis(1,at=c(delta.ni.skpt,delta.ni.enth,-1,1),
labels=c(as.expression(bquote(theta[0])),as.expression(bquote(theta[1])),-1,1))
axis(2,at=c(mu,0,1),
labels=c(as.expression(bquote(mu[0])),0,1))
## FILL IN LAST SEGMENT
polygon(c(outer.x,outer.x[1]),
c(outer.y,outer.y[1]),
col=colors[i],
border = NA)
#######################################
#### Figure 1, One Arm Prior Plots ####
#######################################
dev.off()
rm(list = ls())
root<-"/Users/kwiatkoe/Documents/GitHub/Bayesian-Sequential-Monitoring/00-paper/FIGURES/onearm/code"
setwd(root)
source("code_functions.R")
source("args_model.R")
width.scale<-6
rior.nc.skpt<-skpt_prior_default()
source("plots/plots_prior_skpt.R")
mtext("(A)",side=2,line=1,at=6,las=1)
prior.nc.skpt<-skpt_prior_default()
source("plots/plots_prior_skpt.R")
mtext("(A)",side=2,line=1,at=6,las=1)
png('../../figure1b.png',width = 300*width.scale, height = 300*width.scale,pointsize=16,res=300)
prior.nc.skpt<-skpt_prior_custom(scale=1.15)
source("plots/plots_prior_skpt.R")
mtext("(B)",side=2,line=1,at=6,las=1)
dev.off()
source("plots/plots_prior_skpt.R")
