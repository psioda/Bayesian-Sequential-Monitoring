integral2(prior.fut,xmin=0,xmax=0.9,ymin=function(x) x+0.1,ymax=1,singular=T)[[1]]/prior.fut.nc)
tail.fut
rm(list = ls())
# x <- seq(0, 1, length= 100)
# y <- x
# z <- outer(x, y, prior.fut)
# wireframe(z, drape=T, col.regions=rainbow(100))
require(rmutil)
require(lattice)
require(pracma)
# prior parameters
sigma<-9.429
alpha<-2
delta.skpt<-0
mu<-0.1
## ENTH PRIOR #########################################################
prior.fut<-function(x,y){
exp(-(sigma*(x-mu)^2)^alpha)*
exp(-((sigma*((y-x)-delta.skpt))^2)^alpha)
}
x <- seq(0, 1, length= 100)
y <- x
z <- outer(x, y, prior.fut)
wireframe(z, drape=T, col.regions=rainbow(100))
prior.fut.nc<-tryCatch(integral2(prior.fut,xmin=0,xmax=1,ymin=0,ymax=1,singular=T)[[1]],
error=function(e) integral2(posterior.enth,xmin=0,xmax=1,ymin=0,ymax=1,abstol=1E-6)[[1]])
tail.fut<-tryCatch(
integral2(prior.fut,xmin=0,xmax=0.9,ymin=function(x) x+0.1,ymax=1,singular=T)[[1]]/prior.fut.nc,
error=function(e)
integral2(prior.fut,xmin=0,xmax=0.9,ymin=function(x) x+0.1,ymax=1,singular=T)[[1]]/prior.fut.nc)
tail.fut
rm(list = ls())
# x <- seq(0, 1, length= 100)
# y <- x
# z <- outer(x, y, prior.fut)
# wireframe(z, drape=T, col.regions=rainbow(100))
require(rmutil)
require(lattice)
require(pracma)
# prior parameters
sigma<-9.43
alpha<-2
delta.skpt<-0
mu<-0.1
## ENTH PRIOR #########################################################
prior.fut<-function(x,y){
exp(-(sigma*(x-mu)^2)^alpha)*
exp(-((sigma*((y-x)-delta.skpt))^2)^alpha)
}
x <- seq(0, 1, length= 100)
y <- x
z <- outer(x, y, prior.fut)
wireframe(z, drape=T, col.regions=rainbow(100))
prior.fut.nc<-tryCatch(integral2(prior.fut,xmin=0,xmax=1,ymin=0,ymax=1,singular=T)[[1]],
error=function(e) integral2(posterior.enth,xmin=0,xmax=1,ymin=0,ymax=1,abstol=1E-6)[[1]])
tail.fut<-tryCatch(
integral2(prior.fut,xmin=0,xmax=0.9,ymin=function(x) x+0.1,ymax=1,singular=T)[[1]]/prior.fut.nc,
error=function(e)
integral2(prior.fut,xmin=0,xmax=0.9,ymin=function(x) x+0.1,ymax=1,singular=T)[[1]]/prior.fut.nc)
tail.fut
rm(list = ls())
# x <- seq(0, 1, length= 100)
# y <- x
# z <- outer(x, y, prior.fut)
# wireframe(z, drape=T, col.regions=rainbow(100))
require(rmutil)
require(lattice)
require(pracma)
# prior parameters
sigma<-9.435
alpha<-2
delta.skpt<-0
mu<-0.1
## ENTH PRIOR #########################################################
prior.fut<-function(x,y){
exp(-(sigma*(x-mu)^2)^alpha)*
exp(-((sigma*((y-x)-delta.skpt))^2)^alpha)
}
x <- seq(0, 1, length= 100)
y <- x
z <- outer(x, y, prior.fut)
wireframe(z, drape=T, col.regions=rainbow(100))
prior.fut.nc<-tryCatch(integral2(prior.fut,xmin=0,xmax=1,ymin=0,ymax=1,singular=T)[[1]],
error=function(e) integral2(posterior.enth,xmin=0,xmax=1,ymin=0,ymax=1,abstol=1E-6)[[1]])
tail.fut<-tryCatch(
integral2(prior.fut,xmin=0,xmax=0.9,ymin=function(x) x+0.1,ymax=1,singular=T)[[1]]/prior.fut.nc,
error=function(e)
integral2(prior.fut,xmin=0,xmax=0.9,ymin=function(x) x+0.1,ymax=1,singular=T)[[1]]/prior.fut.nc)
tail.fut
?sample
sample(c(1,2,3,4),4,replace=FALSE)
sample(c(1,2,3,4),4,replace=FALSE)
?sample
c(sample(c(rep(1,4),rep(2,20))),sample(c(rep(1,38),rep(2,38))))
c(sample(c(rep(0,4),rep(1,20))),sample(c(rep(0,38),rep(1,38))))
x<-c(sample(c(rep(0,4),rep(1,20))),sample(c(rep(0,38),rep(1,38))))
sum(x)
cumsum(x)
cumsum(x)[24]
x<-c(sample(c(rep(0,4),rep(1,20))),sample(c(rep(0,38),rep(1,38))))
x<-c(sample(c(rep(0,4),rep(1,20))),sample(c(rep(0,38),rep(1,38))))
x<-c(sample(c(rep(0,4),rep(1,20))),sample(c(rep(0,38),rep(1,38))))
x
group<-c(sample(c(rep(0,4),rep(1,20))),sample(c(rep(0,38),rep(1,38))))
enr.times.all<-cumsum(rgamma(n=max.ss,shape=1,scale=1))
max.ss<-100
group<-c(sample(c(rep(0,4),rep(1,20))),sample(c(rep(0,38),rep(1,38))))
enr.times.all<-cumsum(rgamma(n=max.ss,shape=1,scale=1))
enr.times.all
group
enr.times.all<-cumsum(rgamma(n=max.ss,shape=1,scale=1))
df<-rbind(group,enr.times.all)
df
df$outcome <- NA
df
df$d <- group
df
df
outcomes<-rep(NA,100)
outcomes
outcomes<-rep(NA,100)
outcomes<-rep(NA,100)
outcomes[group==0] <- 10
outcomes[group==1] <- 11
outcomes
enr.times.PC<-enr.times.all[group==0]
enr.times.all<-cumsum(rgamma(n=max.ss,shape=1,scale=1))
rm(list = ls())
max.ss<-100
group<-c(sample(c(rep(0,4),rep(1,20))),sample(c(rep(0,38),rep(1,38))))
enr.times.all<-cumsum(rgamma(n=max.ss,shape=1,scale=1))
outcome.times.all<-enr.times.all+52
enr.times.all
outcome.times.all
rm(list = ls())
max.ss<-100
group<-c(sample(c(rep(0,4),rep(1,20))),sample(c(rep(0,38),rep(1,38))))
enr.times.all<-cumsum(rgamma(n=max.ss,shape=1,scale=1))
outcome.times.all<-enr.times.all+52
enr.times.PC<-enr.times.all[group=="PC"]
outcome.times.PC<-outcome.times[group=="PC"]
responses.PC<-rbinom(n=42,size=1,prob=p.PC)
enr.times.IP<-enr.times.all[group=="PC"]
outcome.times.IP<-outcome.times[group=="PC"]
responses.IP<-rbinom(n=58,size=1,prob=p.IP)
rm(list = ls())
max.ss<-100
p.IP<-0.51
p.PC<-0.39
group<-c(sample(c(rep(0,4),rep(1,20))),sample(c(rep(0,38),rep(1,38))))
enr.times.all<-cumsum(rgamma(n=max.ss,shape=1,scale=1))
outcome.times.all<-enr.times.all+52
enr.times.PC<-enr.times.all[group=="PC"]
outcome.times.PC<-outcome.times[group=="PC"]
responses.PC<-rbinom(n=42,size=1,prob=p.PC)
rm(list = ls())
max.ss<-100
p.IP<-0.51
p.PC<-0.39
group<-c(sample(c(rep(0,4),rep(1,20))),sample(c(rep(0,38),rep(1,38))))
enr.times.all<-cumsum(rgamma(n=max.ss,shape=1,scale=1))
outcome.times.all<-enr.times.all+52
enr.times.PC<-enr.times.all[group=="PC"]
outcome.times.PC<-outcome.times[group=="PC"]
responses.PC<-rbinom(n=42,size=1,prob=p.PC)
enr.times.IP<-enr.times.all[group=="PC"]
outcome.times.IP<-outcome.times.all[group=="PC"]
responses.IP<-rbinom(n=58,size=1,prob=p.IP)
rm(list = ls())
max.ss<-100
p.IP<-0.51
p.PC<-0.39
group<-c(sample(c(rep(0,4),rep(1,20))),sample(c(rep(0,38),rep(1,38))))
enr.times.all<-cumsum(rgamma(n=max.ss,shape=1,scale=1))
outcome.times.all<-enr.times.all+52
enr.times.PC<-enr.times.all[group=="PC"]
outcome.times.PC<-outcome.times.all[group=="PC"]
responses.PC<-rbinom(n=42,size=1,prob=p.PC)
enr.times.IP<-enr.times.all[group=="PC"]
outcome.times.IP<-outcome.times.all[group=="PC"]
responses.IP<-rbinom(n=58,size=1,prob=p.IP)
?rgamma
enr.times.all<-cumsum(rgamma(n=max.ss,shape=1,scale=1/17.2))
rm(list = ls())
max.ss<-100
p.IP<-0.51
p.PC<-0.39
group<-c(sample(c(rep(0,4),rep(1,20))),sample(c(rep(0,38),rep(1,38))))
enr.times.all<-cumsum(rgamma(n=max.ss,shape=1,scale=1/17.2))
enr.times.all
rm(list = ls())
max.ss<-100
p.IP<-0.51
p.PC<-0.39
group<-c(sample(c(rep(0,4),rep(1,20))),sample(c(rep(0,38),rep(1,38))))
enr.times.all<-cumsum(rgamma(n=max.ss,shape=1,scale=17.2))
enr.times.all
rm(list = ls())
max.ss<-100
p.IP<-0.51
p.PC<-0.39
group<-c(sample(c(rep(0,4),rep(1,20))),sample(c(rep(0,38),rep(1,38))))
enr.times.all<-cumsum(rgamma(n=max.ss,shape=1,scale=17.2))
enr.times.all
rm(list = ls())
max.ss<-100
p.IP<-0.51
p.PC<-0.39
group<-c(sample(c(rep(0,4),rep(1,20))),sample(c(rep(0,38),rep(1,38))))
enr.times.all<-cumsum(rgamma(n=max.ss,shape=1,scale=17.2))
enr.times.all
rm(list = ls())
max.ss<-100
p.IP<-0.51
p.PC<-0.39
group<-c(sample(c(rep(0,4),rep(1,20))),sample(c(rep(0,38),rep(1,38))))
enr.times.all<-cumsum(rgamma(n=max.ss,shape=1,scale=17.2))
enr.times.all
rm(list = ls())
max.ss<-100
p.IP<-0.51
p.PC<-0.39
group<-c(sample(c(rep(0,4),rep(1,20))),sample(c(rep(0,38),rep(1,38))))
enr.times.all<-cumsum(rgamma(n=max.ss,shape=1,scale=17.2))
enr.times.all
rm(list = ls())
max.ss<-100
p.IP<-0.51
p.PC<-0.39
group<-c(sample(c(rep(0,4),rep(1,20))),sample(c(rep(0,38),rep(1,38))))
enr.times.all<-cumsum(rgamma(n=max.ss,shape=17.2,scale=1))
enr.times.all
?rgamma
rm(list = ls())
max.ss<-100
p.IP<-0.51
p.PC<-0.39
group<-c(sample(c(rep(0,4),rep(1,20))),sample(c(rep(0,38),rep(1,38))))
enr.times.all<-cumsum(rgamma(n=max.ss,shape=1,scale=17.2))
enr.times.all
rm(list = ls())
max.ss<-100
p.IP<-0.51
p.PC<-0.39
group<-c(sample(c(rep(0,4),rep(1,20))),sample(c(rep(0,38),rep(1,38))))
enr.times.all<-cumsum(rgamma(n=max.ss,shape=1,scale=17.2))
rm(list = ls())
max.ss<-100
p.IP<-0.51
p.PC<-0.39
group<-c(sample(c(rep(0,4),rep(1,20))),sample(c(rep(0,38),rep(1,38))))
enr.times.all<-cumsum(rgamma(n=max.ss,shape=1,scale=17.2))
enr.times.all
rm(list = ls())
max.ss<-100
p.IP<-0.51
p.PC<-0.39
group<-c(sample(c(rep(0,4),rep(1,20))),sample(c(rep(0,38),rep(1,38))))
enr.times.all<-cumsum(rgamma(n=max.ss,shape=1,scale=17.2))
enr.times.all
rm(list = ls())
max.ss<-100
p.IP<-0.51
p.PC<-0.39
group<-c(sample(c(rep(0,4),rep(1,20))),sample(c(rep(0,38),rep(1,38))))
enr.times.all<-cumsum(rgamma(n=max.ss,shape=1,scale=17.2))
enr.times.all
rm(list = ls())
max.ss<-100
p.IP<-0.51
p.PC<-0.39
group<-c(sample(c(rep(0,4),rep(1,20))),sample(c(rep(0,38),rep(1,38))))
enr.times.all<-cumsum(rgamma(n=max.ss,shape=1,scale=17.2))
enr.times.all
rm(list = ls())
max.ss<-100
p.IP<-0.51
p.PC<-0.39
group<-c(sample(c(rep(0,4),rep(1,20))),sample(c(rep(0,38),rep(1,38))))
enr.times.all<-cumsum(rgamma(n=max.ss,shape=1,scale=17.2))
enr.times.all
rm(list = ls())
max.ss<-100
p.IP<-0.51
p.PC<-0.39
group<-c(sample(c(rep(0,4),rep(1,20))),sample(c(rep(0,38),rep(1,38))))
enr.times.all<-cumsum(rgamma(n=max.ss,shape=1,scale=17.2))
enr.times.all
rm(list = ls())
max.ss<-100
p.IP<-0.51
p.PC<-0.39
group<-c(sample(c(rep(0,4),rep(1,20))),sample(c(rep(0,38),rep(1,38))))
enr.times.all<-cumsum(rgamma(n=max.ss,shape=1,scale=17.2))
enr.times.all
rm(list = ls())
max.ss<-100
p.IP<-0.51
p.PC<-0.39
group<-c(sample(c(rep(0,4),rep(1,20))),sample(c(rep(0,38),rep(1,38))))
enr.times.all<-cumsum(rgamma(n=max.ss,shape=1,scale=17.2))
enr.times.all
rm(list = ls())
max.ss<-100
p.IP<-0.51
p.PC<-0.39
group<-c(sample(c(rep(0,4),rep(1,20))),sample(c(rep(0,38),rep(1,38))))
enr.times.all<-cumsum(rgamma(n=max.ss,shape=1,scale=17.2))
enr.times.all
seq(1,1600,by=17.2)
length(seq(1,1600,by=17.2))
?seq
enr.times.all<-seq(1:100)
enr.times.all
enr.times.all<-seq(1:100)*17.2
rm(list = ls())
max.ss<-100
p.IP<-0.51
p.PC<-0.39
group<-c(sample(c(rep(0,4),rep(1,20))),sample(c(rep(0,38),rep(1,38))))
enr.times.all<-seq(1:100)*17
outcome.times.all<-enr.times.all+52
outcome.times.all
enr.times.all
rm(list = ls())
max.ss<-100
p.IP<-0.51
p.PC<-0.39
group<-c(sample(c(rep("PC",4),rep("IP",20))),sample(c(rep("PC",38),rep("IP",38))))
group
rm(list = ls())
max.ss<-100
p.IP<-0.51
p.PC<-0.39
group<-c(sample(c(rep("PC",4),rep("IP",20))),sample(c(rep("PC",38),rep("IP",38))))
enr.times.all<-seq(1:100)*17
outcome.times.all<-enr.times.all+52
enr.times.PC<-enr.times.all[group=="PC"]
outcome.times.PC<-outcome.times.all[group=="PC"]
responses.PC<-rbinom(n=42,size=1,prob=p.PC)
enr.times.IP<-enr.times.all[group=="PC"]
outcome.times.IP<-outcome.times.all[group=="PC"]
responses.IP<-rbinom(n=58,size=1,prob=p.IP)
rm(list = ls())
max.ss<-100
p.IP<-0.51
p.PC<-0.39
group<-c(sample(c(rep("PC",4),rep("IP",20))),sample(c(rep("PC",38),rep("IP",38))))
enr.times.all<-seq(1:100)*17
outcome.times.all<-enr.times.all+52
enr.times.PC<-enr.times.all[group=="PC"]
outcome.times.PC<-outcome.times.all[group=="PC"]
responses.PC<-rbinom(n=42,size=1,prob=p.PC)
enr.times.IP<-enr.times.all[group=="IP"]
outcome.times.IP<-outcome.times.all[group=="IP"]
responses.IP<-rbinom(n=58,size=1,prob=p.IP)
responses.IP
responses.PC
mean(responses.IP)
mean(responses.PC)
rm(list = ls())
max.ss<-100
p.IP<-0.51
p.PC<-0.39
group<-c(sample(c(rep("PC",4),rep("IP",20))),sample(c(rep("PC",38),rep("IP",38))))
enr.times.all<-seq(1:100)*17
outcome.times.all<-enr.times.all+52
enr.times.PC<-enr.times.all[group=="PC"]
outcome.times.PC<-outcome.times.all[group=="PC"]
responses.PC<-rbinom(n=42,size=1,prob=p.PC)
enr.times.IP<-enr.times.all[group=="IP"]
outcome.times.IP<-outcome.times.all[group=="IP"]
responses.IP<-rbinom(n=58,size=1,prob=p.IP)
rm(list = ls())
if (.Platform$OS.type == "windows") {
root<-"D:/Users/ekwiatko/Documents/GitHub/Bayesian-Sequential-Monitoring/00-paper/risk difference example"
setwd(root)
require(rmutil)
require(lattice)
require(pracma)
source("bivariate_functions.R")
idx<-1
# prior parameters
sigma<-8
alpha<-2
delta.enth<-0.1
delta.skpt<-0
delta.intr=(delta.skpt+delta.enth)/2
mu<-0.2
# simulation parameters
sig.fut<-0.85
sig.eff<-0.95
cred.tail<-0.05
max.ss<-100
reps<-10
p.IP<-0.2
p.PC<-0.2
freq.mntr<-10
enr.shape<-1
out.mean<-4
}
if (.Platform$OS.type == "unix")    {
# sequence from batch file
args<-commandArgs(trailingOnly = TRUE)
idx<-as.numeric(args[1]);
# set directories
root<-"/nas/longleaf/home/ekwiatko/FDA/riskdiff/"
rpkgs<-paste0(root,"rkpgs")
output<-paste0(root,"output/")
setwd(output)
# load packages
require(rmutil,lib.loc="/nas/longleaf/home/ekwiatko/FDA/riskdiff/rpkgs/")
require(lattice)
require(pracma,lib.loc="/nas/longleaf/home/ekwiatko/FDA/riskdiff/rpkgs/")
# source functions
source("/nas/longleaf/home/ekwiatko/FDA/riskdiff/code/functions.R")
source("/nas/longleaf/home/ekwiatko/FDA/riskdiff/code/parms.R")
# using idx to identify model
model<-read.csv(file="/nas/longleaf/home/ekwiatko/FDA/riskdiff/code/model.csv",header=TRUE,sep=",")
p.IP<-model$p.IP[idx]
p.PC<-model$p.PC[idx]
freq.mntr<-model$freq.mntr[idx]
enr.shape<-model$enr.shape[idx]
out.mean<-model$out.mean[idx]
}
## SIMULATIONS ############################################################
names<-c("eff.mon.initial","eff.mon.final",
"fut.mon.initial","fut.mon.final",
"ss.initial","ss.final",
"post.mean.initial.IP","post.mean.final.IP",
"post.mean.initial.PC","post.mean.final.PC",
"cov.initial","cov.final")
inner<-array(NA,dim=c(reps,length(names)),dimnames=list(seq_len(reps),names))
# posterior probability
probs.p<-c(0,0.01,0.1,0.25,0.5,0.75,0.9,0.99,1)
inner.p<-array(NA, dim=c(reps,2),dimnames=list(seq_len(reps),c("initial.p","final.p")))
outer.p.agree<-rep(NA,3)
names(outer.p.agree)<-c("p.agree","efficacy","conditional")
for (k in 1:reps){
if (k%%10==0){print(paste0("Simulation ",k))}
group<-c(sample(c(rep("PC",4),rep("IP",20))),sample(c(rep("PC",38),rep("IP",38))))
enr.times.all<-seq(1:100)*17
outcome.times.all<-enr.times.all+52
enr.times.PC<-enr.times.all[group=="PC"]
outcome.times.PC<-outcome.times.all[group=="PC"]
responses.PC<-rbinom(n=42,size=1,prob=p.PC)
enr.times.IP<-enr.times.all[group=="IP"]
outcome.times.IP<-outcome.times.all[group=="IP"]
responses.IP<-rbinom(n=58,size=1,prob=p.IP)
# outcome.times.all<-sort(c(outcome.times.IP,outcome.times.PC))
# enr.times.all<-sort(c(enr.times.IP,enr.times.PC))
#
# enr.times.IP<-cumsum(rgamma(n=max.ss,shape=enr.shape,scale=0.5))
# outcome.times.IP<-sort(enr.times.IP+rnorm(n=max.ss,mean=out.mean,sd=0.25))
# responses.IP<-rbinom(n=max.ss,size=1,prob=p.IP)
#
# enr.times.PC<-cumsum(rgamma(n=max.ss,shape=enr.shape,scale=0.5))
# outcome.times.PC<-sort(enr.times.PC+rnorm(n=max.ss,mean=out.mean,sd=0.25))
# responses.PC<-rbinom(n=max.ss,size=1,prob=p.PC)
for (h in seq(freq.mntr,(max.ss),by=freq.mntr)){
result<-eff_fut(h)
futility<-result[2]
efficacy<-result[1]
if (futility>sig.fut | efficacy>sig.eff){
break
}
}
## INITIAL ##
n.initial<-h
result.initial<-pm_cp(n.initial)
inner[k,"fut.mon.initial"]<-(futility>sig.fut)
inner[k,"eff.mon.initial"]<-(efficacy>sig.eff)
inner[k,"post.mean.initial.PC"]<-result.initial[1]
inner[k,"post.mean.initial.IP"]<-result.initial[2]
inner[k,"cov.initial"]<-result.initial[3]
inner[k,"ss.initial"]<-n.initial
inner.p[k,"initial.p"]<-efficacy
## FINAL ##
cutoff.time<-outcome.times.all[n.initial]
n.final<-sum(enr.times.all<=cutoff.time)
result<-eff_fut(n.final)
futility.final<-result[2]
efficacy.final<-result[1]
result.final<-pm_cp(n.final)
inner[k,"fut.mon.final"]<-(futility.final>sig.fut)
inner[k,"eff.mon.final"]<-(efficacy.final>sig.eff)
inner[k,"post.mean.final.PC"]<-result.final[1]
inner[k,"post.mean.final.IP"]<-result.final[2]
inner[k,"cov.final"]<-result.final[3]
inner[k,"ss.final"]<-n.final
inner.p[k,"final.p"]<-efficacy.final
}
outer<-apply(inner,MARGIN=2,FUN=mean)
outer.p<-quantile(inner.p[,"final.p"][inner.p[,"initial.p"]>sig.eff & inner.p[,"final.p"]<sig.eff],
probs=probs.p)
outer.p.agree["p.agree"]<-
sum((inner.p[,"initial.p"]>sig.eff)==(inner.p[,"final.p"]>sig.eff))/reps
outer.p.agree["efficacy"]<-
sum((inner.p[,"initial.p"]>sig.eff) & (inner.p[,"final.p"]>sig.eff))/reps
outer.p.agree["conditional"]<-
sum((inner.p[,"initial.p"]>sig.eff) & (inner.p[,"final.p"]>sig.eff))/sum(inner.p[,"initial.p"]>sig.eff)
# output files
if (.Platform$OS.type == "windows")    {
write.csv(outer,file=paste0(idx,"Table1.csv"))
write.csv(outer.p,file=paste0(idx,"Table2.csv"))
write.csv(outer.p.agree,file=paste0(idx,"Table3.csv"))
}
if (.Platform$OS.type == "unix")    {
write.csv(outer,file=paste0(output,"Table1/",idx,"Table1.csv"))
write.csv(outer.p,file=paste0(output,"Table2/",idx,"Table2.csv"))
write.csv(outer.p.agree,file=paste0(output,"Table3/",idx,"Table3.csv"))
}
